{"version":3,"sources":["Messenger/Componets/TogglerComponet/Toggler.js","Messenger/Componets/Search/Search.js","Messenger/Componets/ActiveUsers/ActiveUser.js","Messenger/Componets/LoadingSpinner/SpinnerComponet.js","Messenger/Componets/ActiveUsers/ActiveUsers.js","Messenger/Componets/PendingUsers/PendingUser.js","Messenger/Componets/PendingUsers/PendingUsers.js","Messenger/Componets/ActiveUserToggler/ActiveUserComponetToggler.js","Messenger/Componets/SearchUsers/SearchedUser.js","Messenger/Componets/SearchUsers/SearchedUsersComponet.js","Messenger/Componets/SideBar.js","Messenger/Componets/Login/LoginComponet.js","Messenger/Componets/Login/AccountButton.js","Messenger/Componets/Login/AccountComponet.js","Messenger/Componets/NavComponet/NavComponet.js","Messenger/Componets/Messages/MessageInstanceComponet.js","Messenger/Componets/Messages/MessageListComponet.js","Messenger/Componets/Messages/MessageComponet.js","Messenger/Componets/MessagingInput/MessengerTextArea.js","Messenger/Componets/textBoxMessageComponet.js","Messenger/Componets/MainContent.js","App.js","serviceWorker.js","Messenger/Sevices/MessengerService.js","Messenger/Models/UserModel.js","Messenger/Stores/SearchUserStore.js","Messenger/Stores/UserStore.js","Messenger/Stores/UIUsersStore.js","Messenger/Models/MessagesModel.js","Messenger/Stores/UserMessagesStore.js","Messenger/Stores/LoginStore.js","Messenger/Stores/rootStore.js","index.js"],"names":["Toggler","props","onClickHandlier","children","text","className","onClick","Search","this","value","onChange","searchHandlier","type","icon","faSearch","Component","ActiveUser","setActive","user","setUserActive","href","src","alt","username","observer","SpinnerComponet","animation","size","role","ActiveUsers","rootStore","searchText","activeUsers","userStore","listActiveContacts","getIsLoadingActive","filter","item","toLowerCase","includes","map","key","uuid","inject","PendingUser","acceptRequest","denyRequest","rejectRequest","PendingUsers","pendingUsers","listPendingContacts","getIsLoadingPending","ActiveUserComponetToggler","stateChangeHandler","viableStates","viableState","id","stateName","uiName","SearchedUser","sendContactRequest","canAddStatus","getExtraMeta","canSendRequest","SearchedUsers","handlierLoadMoreUsers","event","searchUserStore","getNextDataSet","ulRefSearchedUsers","React","createRef","heightList","searchUsers","getSearchedUsers","loading","getloadingUser","moreUsersLoad","getNextQueryAddress","ref","faChevronDown","SideBar","toggleActiveSideBar","uiUserStore","toggleSideBarActive","setSearchText","setsearchString","target","searchForUser","getSearchUserStore","searchForUsers","setUserUiState","state","setActiveElement","userStateUI","getActiveElement","getViableStates","searchString","getSearchString","toRender","SearchedUsersComponet","getIsActive","error","errorInfo","setState","console","log","LoginComponet","show","onHide","Header","closeButton","Title","Body","Group","controlId","Label","Control","onChangeEmail","placeholder","Text","onChangePassword","password","Check","label","logInHandlier","variant","AccountButton","faUser","AccountComponet","logInStore","logInUser","handleClose","setShow","handleShow","bool","previousState","isLoggedIn","NavComponet","toggleSideBarState","faAlignLeft","MessageInstanceComponet","message","activeUser","orientationString","from_User","fullClassOrientation","MessageListComponet","ulRef","current","scrollTop","scrollHeight","messages","mssg","MessageComponet","currentActiveUser","userMessageStore","getMessagesActiveUser","objectToRender","uuidUser","userModelMessages","MessengerTextArea","textInputEnter","onEnter","sendMessageHandlier","code","addEventListener","onTextChange","TextBoxMessageComponet","messgObject","contructedMessageInternelMessage","MainContent","setMessageToSend","messageText","trim","length","setMessageText","sendMessage","App","Boolean","window","location","hostname","match","configure","enforceActions","MessengerService","tokenHeaderReady","reconnectingWebSocket","webSocketisConnected","webSocketisError","isLoggin","authToken","eventListener","base_url","eventReceiverHandlier","eventJson","JSON","parse","data","eventType","arrayHandliers","forEach","handlier","headersList","headers","when","setUpWebSocket","checkUserLoggedIn","then","setLoggedIn","functionHandlier","String","push","Promise","resolve","reject","stringify","send","url","ReconnectingWebSocket","setConnectedWebSocketFlag","axios","get","response","post","userLoginInfo","token","user_uuid","putRequest","put","status","delete","querySearch","userUUID","queryString","checkLoggedInAPI","usernamePassWord","messageService","getLoginToken","catch","decorate","observable","action","setWebSocketError","computed","UserModel","storeOwner","userJsonInfo","areActiveContact","user_image","store","extraMeta","requestAcceptHandlier","requestDenyHandlier","setActiveContact","jsonData","setExtraMeta","SearchUserStore","transporLayer","uiStore","searchedUsers","nextQueryAddress","uiSideBar","loadingUsers","loadUserError","listUser","mappedUsers","userModelInstance","searchUserQuery","setSearchUsers","results","next","userModel","getNextUsersSet","apiSearch","getloadingUserError","UserStore","activeContacts","pendingContacts","isLoadingActiveContactsFlag","isLoadingPendingContactsFlag","loadingActiveError","loadingPendingError","searchStore","asyncLoadData","loadContacts","loadPendingContacts","modelObject","isActive","foundUser","find","element","upDate","setLoadingActive","getContacts","usersContactList","setUser","setLoadingPending","getPendingContacts","usersContactPendingList","idUsername","generateActiveUserList","acceptContactRequest","modifiledPending","replace","setUserModel","denyContactRequest","newUsersActives","unshift","asJson","getLoadingActiveError","getLoadingPendingError","UIUserStore","activeElement","txt","MessagesModel","mssgJson","to_User","arrayMessage","addMessage","userMesages","getMessages","bulkAddMessages","UserMessageStore","userMesagesModels","isLoadingMesagesFlag","loadingMessagesError","contructedMessage","toUser","receiveMessage","to_UserModel","from_UserModel","reaction","setMessageUser","addEventListenerHandlier","setContactUsers","loadMessages","messageJson","constructMessageToSend","sendMessageWebSocket","textMessage","userContact","listContactUser","mssgsJson","activerUser","setContactSingle","getContructedMessage","LogInStore","flag","rootStoreInstance","transportLayer","uiSideBarStore","startAsyncServices","num","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd5a08a5.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * \n * @param {*} props - incoming props from managing componet\n */\n//Provides Toggling/Button Abilities\nfunction Toggler(props) {\n    const {onClickHandlier = null, children=null, text=null, className=null} = props;\n    if (onClickHandlier == null){\n      \n    }\n    return (\n      <div className={`toggler ${className}`}>\n        <button  onClick ={onClickHandlier}>\n        {text}\n        {children}</button>\n      </div>\n    );\n}\n\nexport default Toggler;\n","import React, {Component} from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n//Provides Search Functionality Throught TextInput Send Text Event To Handlier(Parent-)\nclass Search extends Component{\n    constructor(props){\n      super(props);\n\n    }\n    render() {\n      const {value=null, onChange=null, children=null, searchHandlier=null} = this.props;\n      return (\n       \n        <div className=\"search-users\">\n            <form>\n                {children}<input\n                type = \"text\"\n                value = {value}\n                onChange = {onChange}\n                />\n            </form>\n            <div className=\"search-button-container\">\n              <div className=\"searchButton\" onClick={searchHandlier}>\n                <FontAwesomeIcon icon={faSearch} />\n              </div>\n            </div>\n        </div>\n        \n        \n  \n      );\n    }\n    \n  }\n  \n  export default Search;","import React, { Component } from \"react\";\nimport { observer} from \"mobx-react\"\n\n//Active User Componet Keep. UI Componet For User Instance \nclass ActiveUser extends Component {\n    constructor(props) {\n        super(props)\n\n    }\n    //Set the active user by calling internel method belong to the user model\n    setActive = () => {\n        this.props.user.setUserActive();\n    }\n    render() {\n        const {user = null } = this.props;\n\n        return ( \n            <li onClick = { this.setActive } >\n                <a href = \"#\" >\n                    <div className = \"profile-img\">\n                        <img src = \"https://via.placeholder.com/500\" alt = { `user-profile ${user.username}` }/>  \n                    </div > \n                    <div className = \"contact-info\" >\n                        <div> { user.username } </div> \n                    </div >\n                    {/* <div className=\"active-user-status\">\n                        <div className=\"online\">\n                            <button>Online</button>\n                        </div>\n                        <div className=\"offline\">\n                            <button>Offline</button>\n                        </div>\n                    </div> */}\n                </a> \n            </li >\n        );\n    }\n\n\n}\n\nexport default observer(ActiveUser);","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nconst  SpinnerComponet = (props)=>{\n  \n  return (\n    <div className=\"containerLoading\">\n        <Spinner animation=\"grow\" size=\"lg\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n  </div>\n  );\n}\nexport default SpinnerComponet;","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport ActiveUser from \"./ActiveUser\"\nimport Spinner from 'react-bootstrap/Spinner';\nimport SpinnerComponet from \"../LoadingSpinner/SpinnerComponet\"\n\n//Manages UI Active Users Displayed To The User\nclass ActiveUsers extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const {rootStore,searchText} = this.props;\n    let activeUsers = rootStore.userStore.listActiveContacts;\n    let loading = rootStore.userStore.getIsLoadingActive;\n    if (!loading){\n      //f not active user \n      if (!activeUsers){\n        return (\n          <div className=\"activeUsers\">\n              YOu Have No Contacts..Try Adding Some In The Search User Menu\n          </div>\n         );\n      } \n      return (\n      <div className=\"activeUsers\">\n          \n          <ul className=\"users\">\n              \n              {activeUsers.filter((item=>{\n                return item.username.toLowerCase().includes(searchText.toLowerCase());\n              })).map(user=>{\n                \n                  return (\n                    \n                    // {/* <Spinner animation=\"border\" role=\"status\">\n                    //   <span className=\"sr-only\">Loading...</span>\n                    // </Spinner>\n                    // </> */}\n\n                    <ActiveUser  key={user.uuid} user={user}></ActiveUser>\n                   \n                  );\n              })}\n          </ul>\n      </div>\n      );\n    }\n    else {\n      return (\n        <SpinnerComponet></SpinnerComponet>\n      );\n    }\n  }\n  \n  \n}\n\nexport default inject(\"rootStore\")(observer(ActiveUsers));\n","import React, {Component} from \"react\";\nimport { observer} from \"mobx-react\"\n\n//Provides A List Of Pending Users\nclass PendingUser extends Component{\n  constructor(props){\n    super(props)\n    \n  }   \n  acceptRequest= (user)=>{\n    user.acceptRequest();\n  }\n  denyRequest= (user)=>{\n    user.rejectRequest();\n  }\n  render() {\n    const {user=null} = this.props;\n    \n    return (\n      <li onClick={this.setActive} >\n      <a href=\"#\" >\n        <div className=\"profile-img\">\n          <img src=\"https://via.placeholder.com/500\" alt={`user-profile ${user.username}`} /> \n        </div>\n        <div className=\"contact-info\">\n          <div>{user.username}</div>\n         \n        </div>\n        <div className=\"pending-user-control\">\n          <div className=\"add-contact\">\n            <button onClick= {()=>{\n                this.acceptRequest(user);\n            }}>Add</button>\n          </div>\n          <div className=\"reject-contact\">\n            <button onClick= {()=>{\n                this.denyRequest(user);\n            }}>Reject</button>\n          </div>\n        </div>\n        \n      </a>\n    </li>\n    );\n  }\n  \n  \n}\nexport default observer(PendingUser) ;\n","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport PendingUser from \"./PendingUser\"\nimport SpinnerComponet from \"../LoadingSpinner/SpinnerComponet\";\n//Manages A List Of Pending Users Instances\nclass PendingUsers extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const {/*children,*/ rootStore,searchText} = this.props;\n    let pendingUsers = rootStore.userStore.listPendingContacts;\n    let loading = rootStore.userStore.getIsLoadingPending;\n    if (!loading){\n      if (!pendingUsers){\n          return (\n            <div className=\"pendingUsers\">\n                YOu Have Pending Contact\n            </div>\n           );\n      }\n      return (\n      <div className=\"pendingUsers\">\n          \n          <ul className=\"users\">\n              \n              {pendingUsers.filter((item=>{\n                return item.username.toLowerCase().includes(searchText.toLowerCase());\n              })).map(user=>{\n                \n                  return (\n                      <PendingUser  key={user.uuid} user={user}/>\n                  )\n              })}\n          </ul>\n      </div>\n      );\n    }\n    else {\n      return (\n        <SpinnerComponet></SpinnerComponet>\n      );\n    }\n  }\n  \n  \n}\n\nexport default inject(\"rootStore\")(observer(PendingUsers));\n","import React from \"react\";\n/**\n * \n * @param {*} props - incoming props from managing componet\n */\n//Toggler That Provides User With Ui Option Chnages Such As Active Contact or a list of pending contact\nfunction ActiveUserComponetToggler(props) {\n    const {stateChangeHandler= null, viableStates=null} = props;\n    if (viableStates == null){\n        return (<div>Viable States Werent Given:Error</div>)\n    }\n    return (\n      <div className=\"users-type-toggler\">\n        <ul className=\"users-type-toggler-list\">\n            {viableStates.map(viableState=>{\n                return (\n                <li id={viableState.stateName+\"Id\"} key={viableState.stateName+\"Id\"} \n                        className=\"item-type\">\n                    <button   onClick ={\n                        ()=>stateChangeHandler(viableState.stateName)}>\n                        {viableState.uiName}\n                    </button>\n                </li >)\n            })}\n        </ul>\n      </div>\n    );\n}\n\nexport default ActiveUserComponetToggler;\n","import React, {Component} from \"react\";\nimport { observer } from 'mobx-react';\n//Provides A List Of Pending Users\nclass SearchedUser extends Component{\n  constructor(props){\n    super(props)\n    \n  }   \n  sendContactRequest= (user)=>{\n    if (user !== null){\n      user.sendContactRequest();\n    }\n  }\n  \n  render() {\n    const {user=null} = this.props;\n    const canAddStatus = user.getExtraMeta.canSendRequest;\n    return (\n      <li onClick={this.setActive} >\n      <a href=\"#\" >\n        <div className=\"profile-img\">\n          <img src=\"https://via.placeholder.com/500\" alt={`user-profile ${user.username}`} /> \n        </div>\n        <div className=\"contact-info\">\n          <div>{user.username}</div>\n         \n        </div>\n\n       {canAddStatus && <div className=\"add-user-container\">\n          <div className=\"add-contact\">\n            <button onClick={()=>{\n              this.sendContactRequest(user);\n            }}>Send Request</button>\n          </div>\n        </div>\n       }\n        \n      </a>\n    </li>\n    );\n  }\n  \n  \n}\nexport default observer(SearchedUser) ;\n","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport SpinnerComponet from \"../LoadingSpinner/SpinnerComponet\";\nimport SearchedUser from \"./SearchedUser\";\n//Manages A List Of Pending Users Instances\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown} from '@fortawesome/free-solid-svg-icons'\nclass SearchedUsers extends Component{\n  \n  constructor(props){\n    super(props);\n    this.ulRefSearchedUsers = React.createRef();\n    this.heightList = 0;\n  }\n  //Handles Click Event When User Request For More Users\n  handlierLoadMoreUsers = (event)=>{\n    const {searchUserStore=null} = this.props;\n    if (searchUserStore != null){\n      searchUserStore.getNextDataSet();\n    }\n  }\n  // trackHeightPostion(event){\n  //   // console.log(event);\n  // }\n  // componentDidMount(){\n  //   // this.ulRefSearchedUsers .current.scrollTop =  this.ulRef.current.scrollHeight;\n  //   console.log(this.ulRefSearchedUsers.current);\n  //   if(this.ulRefSearchedUsers.current !== null){\n  //     this.ulRefSearchedUsers.current.addEventListener(\"scroll\", this.trackHeightPostion);\n  //   }\n  // }\n  // componentDidUpdate(){\n  //   console.log(this.ulRefSearchedUsers.current);\n  //   //this.ulRefSearchedUsers.current.addEventListener(\"scroll\", this.trackHeightPostion);\n  // }\n  // componentWillUnmount(){\n  //   this.ulRefSearchedUsers.current.removeEventListener(\"scroll\", this.trackHeightPostion);\n  // }\n  \n  render() {\n    //searchUserStore\n    const {/*children,*/ searchUserStore=null,searchText=null} = this.props;\n    if (searchUserStore == null){\n      return (<div>Seems The RootStore Was Not Provided</div>)\n    }\n    const searchUsers = searchUserStore.getSearchedUsers;\n    const loading = searchUserStore.getloadingUser;\n    const moreUsersLoad= searchUserStore.getNextQueryAddress\n    if (!loading){\n      if (!searchUsers){\n          return (\n            <div className=\"searchUsers\">\n                No Results....Search For Using Above \n            </div>\n           );\n      }\n      return (\n      <div className=\"searchUsers\">\n          \n          <ul ref={this.ulRefSearchedUsers} className=\"users\">\n              \n              {searchUsers.map((user=>{\n                return(\n                        <SearchedUser  key={user.uuid} user={user}/>\n                      )\n              }))}\n             {moreUsersLoad &&\n              <li className=\"loadContact\" onClick={this.handlierLoadMoreUsers}>\n                <div className=\"loading-contacts-container\">\n                  <div className=\"load-more-contacts\" >\n                    <FontAwesomeIcon icon={faChevronDown} />\n                  </div>\n                </div>\n              </li>\n             }\n          </ul>\n      </div>\n      );\n    }\n    else {\n      return (\n        \n        <SpinnerComponet></SpinnerComponet>\n      );\n    }\n  }\n  \n  \n}\n\nexport default inject(\"rootStore\")(observer(SearchedUsers));\n","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport \"../css/SideBar.css\"\nimport Toggler from \"./TogglerComponet/Toggler\"\nimport Search  from \"./Search/Search\"\nimport ActiveUsers from \"./ActiveUsers/ActiveUsers\"\nimport PendingUsers from \"./PendingUsers/PendingUsers\"\nimport ActiveUserComponetToggler from \"./ActiveUserToggler/ActiveUserComponetToggler\"\n//  import css styling \nimport \"../css/ActiveUser.css\"\nimport \"../css/PendingUser.css\"\nimport \"../css/Search.css\"\nimport \"../css/Toggler.css\"\nimport \"../css/LoadingSpinner.css\"\nimport \"../css/SearchedUser.css\"\nimport \"../css/ActiveComponetToggler.css\"\nimport SearchedUsersComponet from \"./SearchUsers/SearchedUsersComponet\";\n//Manages The Most Top Layer Of The Side Bar U.I\nclass SideBar extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n        searchText: \"\"\n    };\n    \n  }\n  //Toggles The Side Bar \n  toggleActiveSideBar =()=>{\n    this.props.rootStore.uiUserStore.toggleSideBarActive();\n  }\n  //Handles Text Change in child componet Search \n  setSearchText = (event)=>{\n    this.props.rootStore.uiUserStore.setsearchString(event.target.value);\n    \n      \n  }\n  searchForUser=()=>{\n    this.props.rootStore.userStore.getSearchUserStore.searchForUsers();\n  }\n  //Set which Ui Componet Should Be Rendered\n  setUserUiState =(state)=>{\n    this.props.rootStore.uiUserStore.setActiveElement(state);\n    \n      \n    \n  }\n  //Render Componet\n  render() {\n    const {/*children,*/ rootStore} = this.props;\n    const userStateUI = rootStore.uiUserStore.getActiveElement;\n    const viableStates = rootStore.uiUserStore.getViableStates;\n    const searchString = this.props.rootStore.uiUserStore.getSearchString;\n    let toRender = null;\n    if (userStateUI ===  \"ACTIVECONTACTS\" ){\n      toRender = ( <ActiveUsers searchText={searchString }/>);\n    }\n    else if (userStateUI ===  \"PENDINGCONTACTS\"){\n      toRender = ( <PendingUsers searchText={searchString}/>);\n    }\n    else if (userStateUI ===  \"SEARCHPENDING\"){\n      //toRender = ( <PendingUsers searchText={this.state.searchText}/>);\n      toRender = (<SearchedUsersComponet searchUserStore={rootStore.userStore.getSearchUserStore}  \n                  searchText={searchString}/>)\n    }\n    return (\n      <div className={`sidebar ${rootStore.uiUserStore.getIsActive? \"active\" : \"\"}`}>\n        <Toggler onClickHandlier={this.toggleActiveSideBar}/>\n        <ActiveUserComponetToggler viableStates={viableStates} stateChangeHandler={this.setUserUiState}/>\n        <Search searchHandlier={this.searchForUser} value={searchString} onChange={this.setSearchText} children={null}/>\n        {toRender}\n        \n\n\n      </div>\n\n    );\n  }\n  //Viables State Changes \n  viableStates = [\n    \"ACTIVECONTACTS\",\n    \"PENDNGCONTACT\",\n    \"SEARCHUSER\",\n]\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    console.log(error);\n    console.log(errorInfo);\n  }\n  \n}\n\nexport default inject(\"rootStore\")(observer(SideBar));\n","import Form from 'react-bootstrap/Form'\nimport Modal from 'react-bootstrap/Modal'\nimport React from \"react\"\nimport Button from 'react-bootstrap/Button'\nexport default function LoginComponet (props){\n    return (\n        <Modal className=\"text-center\" show={props.show} onHide={props.onHide} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title className=\"text-center\" >Messenger LogIn</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control value={props.username} onChange={props.onChangeEmail}  placeholder=\"Enter Username\" />\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.Not Even You\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control onChange={props.onChangePassword} value={props.password}  type=\"password\" placeholder=\"Password\" />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicChecbox\">\n                    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                </Form.Group>\n                <Button onClick={props.logInHandlier} variant=\"primary\" type=\"submit\">\n                    Login\n                </Button>\n            </Modal.Body>\n            {/* <Modal.Footer>\n            \n            </Modal.Footer> */}\n            </Modal>\n    );\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faUser} from '@fortawesome/free-solid-svg-icons'\nimport \"../../css/Account.css\"\nimport React from \"react\"\nexport default function AccountButton (props){\n    return (\n        <div className={`account-section ${props.className}`}>\n                <button onClick={props.onClick}>\n                <FontAwesomeIcon icon={faUser} />\n                    {props.children}\n                </button>\n            </div>\n    );\n}","import React, {Component} from \"react\";\nimport Button from 'react-bootstrap/Button'\nimport { observer } from \"mobx-react\";\nimport LoginComponet from \"./LoginComponet\";\nimport AccountButton from './AccountButton';\n/***\n * Higher Level Or Parent Componet For Handling User Account Management\n */\nclass AccountComponet extends Component{\n    \n    constructor(props){\n      super(props)\n      this.state = \n      {\n          \"show\": false,\n          \"username\": \"\",\n          \"password\": \"\"\n\n      };\n\n    }\n    logInHandlier=()=>{\n        const {logInStore=null} = this.props;\n        logInStore.logInUser(this.state.username, this.state.password);\n        \n    }\n    setShow(bool){\n        this.setState( \n            \n                (previousState)=>{\n                    return {show: bool, password: bool ? previousState.password : \"\"}\n                }\n            \n        );\n    }\n    onChangeEmail = (event)=>{\n        this.setState( \n            {\n                \"username\": event.target.value\n            }\n        );\n    }\n    onChangePassword = (event)=>{\n        this.setState( \n            {\n                \"password\": event.target.value\n            }\n        );\n    }\n    handleClose = () => this.setShow(false);\n    handleShow = () => this.setShow(true);\n    render(){\n        const {logInStore=null} = this.props;\n        const isLoggedIn = logInStore.isLoggedIn\n        return (\n        <>  \n            <AccountButton\n                onClick={this.handleShow} \n            >\n                {!isLoggedIn ? \"LOGIN\" : \"LOGOUT\"}\n            </AccountButton>\n            <LoginComponet\n                show ={!isLoggedIn && this.state.show}\n                onHide={this.handleClose}\n                username = {this.state.username}\n                password = {this.state.password}\n                onChangeEmail={this.onChangeEmail}\n                onChangePassword = {this.onChangePassword}\n                logInHandlier = {this.logInHandlier}\n            >\n\n            </LoginComponet>\n            \n        </>\n        );\n    }\n  }\n  \n  export default observer(AccountComponet);","import React, {Component} from \"react\";\nimport Toggler from \"../TogglerComponet/Toggler\";\nimport { inject} from 'mobx-react';\nimport AccountComponet from \"../Login/AccountComponet\";\nimport \"../../css/NavBar.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faAlignLeft} from '@fortawesome/free-solid-svg-icons'\nclass NavComponet extends Component{\n  constructor(props){\n    super(props)\n   \n  } \n  //Toggles The State Of The NavBar\n  toggleSideBarState= ()=>{\n    this.props.rootStore.uiUserStore.toggleSideBarActive();\n  }\n  render() {\n    const {/*children,*/searchText} = this.props;\n    return (\n      <div className = \"nav-bar-componet\">\n          <Toggler onClickHandlier = {this.toggleSideBarState} className=\"main-toggle\">\n            <FontAwesomeIcon icon={faAlignLeft} />  Open/Close </Toggler>\n          <AccountComponet logInStore ={this.props.rootStore.logInStore }></AccountComponet >\n      </div>)\n  }\n  \n  \n}\nexport default  inject(\"rootStore\")(NavComponet)\n\n","import React, {Component} from \"react\";\nimport { observer } from 'mobx-react';\n\n\n//Handles One UI Message Instance ie. MessageBox \nclass MessageInstanceComponet extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const {message = null, activeUser = null} = this.props;\n    let orientationString = null\n    if (message.from_User === activeUser){\n        orientationString = \"left\";\n    }\n    else {\n        orientationString = \"right\";\n    }\n    let fullClassOrientation = `message ${orientationString}`;\n    return (\n        <li key={message.id} className={fullClassOrientation}>\n            <div className = \"message-box\" >\n                {message.message}\n            </div>\n        </li>\n           \n    )\n  }\n  \n  \n}\n\nexport default  observer(MessageInstanceComponet);\n ","import React, {Component} from \"react\";\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react';\nimport MessageInstanceComponet from \"./MessageInstanceComponet\";\n\n//Handles MessageInstance For Each User-ie Provides A List Of Message Depending On The Active User\nclass MessageListComponet extends Component{\n  constructor(props){\n    super(props)\n    this.ulRef = React.createRef();\n  }   \n  componentDidUpdate(){\n    this.ulRef.current.scrollTop =  this.ulRef.current.scrollHeight;\n    \n    \n  }\n  componentDidMount(){\n    this.ulRef.current.scrollTop =  this.ulRef.current.scrollHeight;\n    console.log( this.ulRef.current.scrollHeight);\n  }\n  render() {\n    const {messages = null, activeUser = null} = this.props;   \n    return (\n        <ul ref={this.ulRef } className=\"message-list-area\">\n             {messages.map(mssg=>{\n                    return (\n                        <MessageInstanceComponet\n                            key = {mssg.id}\n                            message={mssg}\n                            activeUser = {activeUser}\n                        >\n                        </MessageInstanceComponet>\n                        )\n            })}\n        </ul>\n    )\n  }\n  \n  \n}\n\nexport default  inject(\"rootStore\")(observer(MessageListComponet))\n ","import React, {Component} from \"react\";\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react';\nimport MessageListComponet from \"./MessageListComponet\";\n//Manages The Ui Componet \nclass MessageComponet extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const { rootStore} = this.props;\n    let activeUser = rootStore.userStore.currentActiveUser;\n    let messages = rootStore.userMessageStore.getMessagesActiveUser\n    let  objectToRender = null;\n    if (activeUser == null ){\n        objectToRender = <div>No Active User Click On One</div>\n    }\n    else {\n        let uuidUser = activeUser.uuid;\n        let userModelMessages = messages;\n        if (userModelMessages === null){\n            objectToRender = <div> Still Loading MEssages </div>\n        }\n        else {\n            objectToRender = <MessageListComponet \n                    messages={userModelMessages.messages}\n                    activeUser = {uuidUser}\n                ></MessageListComponet>\n            }\n        \n\n\n    }\n    \n    return (\n        <div className = \"message-componet\">\n            {objectToRender}\n        </div>\n    )\n  }\n  \n  \n}\n\nexport default  inject(\"rootStore\")(observer(MessageComponet));\n\n ","import React, {Component} from \"react\";\n//TextBox Section This Is Where User Input And Sending Messages Will Be Handle On The Ui/Client Side\nexport default  class MessengerTextArea extends Component{\n  textInputEnter = React.createRef();\n  constructor(props){\n    super(props)\n  }   \n  componentDidUpdate(){\n    let textAreaDOME = this.textInputEnter.current;\n    textAreaDOME.addEventListener(\"keyup\",this.onEnter, false);\n  }\n\n  onEnter= (event)=>{\n    const {sendMessageHandlier=null} = this.props;\n    if (event.code === \"Enter\"){\n      if (sendMessageHandlier != null){\n        sendMessageHandlier();\n      }\n  }\n  }\n  render() {\n    const {text = null , onTextChange= null} = this.props;\n    return (\n     <div className=\"textBox\">\n        <textarea ref={this.textInputEnter} onChange={onTextChange} value= {text}> </textarea>\n      </div>\n    )\n  }\n  \n  \n}\n\n\n","import React, {Component} from \"react\";\nimport MessengerTextArea from \"./MessagingInput/MessengerTextArea\";\nimport { observer } from 'mobx-react';\n//TextBox Section This Is Where User Input And Sending Messages Will Be Handle On The Ui/Client Side\nclass TextBoxMessageComponet extends Component{\n  constructor(props){\n    super(props)\n  }   \n  \n  render() {\n    const {onTextChange=null, messgObject=null, sendMessageHandlier=null} = this.props;\n    const text =  messgObject.contructedMessageInternelMessage;\n\n    return (\n      <div className = \"text-box-message-componet\">\n        <MessengerTextArea \n              sendMessageHandlier= {sendMessageHandlier}\n              text = {text}\n              onTextChange={onTextChange}></MessengerTextArea>\n      </div>\n    )\n  }\n  \n  \n}\n\nexport default observer(TextBoxMessageComponet)\n\n\n\n\n","import React, {Component} from \"react\";\nimport \"../css/Content.css\"\nimport NavComponet from \"./NavComponet/NavComponet\";\nimport MessageComponet from \"./Messages/MessageComponet\";\nimport TextBoxMessageComponet from \"./textBoxMessageComponet\";\nimport \"../css/Messages.css\"\nimport { inject, observer } from 'mobx-react';\n\n//Handles The Main Content \nclass MainContent extends Component{\n  constructor(props){\n    //Set internel state for any text chage by the user \n    super(props);\n    this.state = {\n        searchText: \"\"\n    };\n    \n  }\n  //Toggle The SideBar in the store\n  toggleActiveSideBar =()=>{\n    this.props.rootStore.uiUserStore.toggleSideBarActive();\n  }\n  //Handles Text Chnage Events\n  setMessageToSend= (event)=>{\n    \n    let messageText = event.target.value;\n    const {rootStore} = this.props;\n    if (messageText.trim().length > 0 ){\n      rootStore.userMessageStore.setMessageText(messageText);\n    }\n    else {\n      rootStore.userMessageStore.setMessageText(\"\");\n    }\n    \n      \n  }\n  sendMessageHandlier =()=>{\n    const {rootStore} = this.props;\n    const userMessageStore = rootStore.userMessageStore;\n    userMessageStore.sendMessage();\n  }\n  render() {\n    const {rootStore} = this.props;\n    const messgObject = rootStore.userMessageStore;\n    //For Text Input \n    //const messageStore = rootStore.\n    //console.log(rootStore.userStore.activeContacts.length);\n    return (\n        <div className=\"MainContent\"> \n          <NavComponet></NavComponet>\n          <MessageComponet></MessageComponet>\n          <TextBoxMessageComponet\n              messgObject = {messgObject}\n              onTextChange={this.setMessageToSend}\n              sendMessageHandlier = {this.sendMessageHandlier}\n          ></TextBoxMessageComponet>\n        </div>\n\n    );\n  }\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    console.log(error);\n    console.log(errorInfo);\n  }\n  \n}\n\nexport default inject(\"rootStore\")(MainContent);\n","import React from 'react';\nimport './App.css';\nimport SideBar from \"./Messenger/Componets/SideBar\"\nimport MainContent from \"./Messenger/Componets/MainContent\"\nfunction App() {\n  return (\n    <div className=\"container-messenger\">\n      <SideBar/>\n      <MainContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\nimport ReconnectingWebSocket from 'reconnecting-websocket';\n import {observable, action, configure, decorate, reaction, computed, when} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n\nclass MessengerService {\n\n    //LogIn Token Key \n    tokenHeaderReady = null;\n    reconnectingWebSocket = null;\n    //Check if the websocket is connected yet yet?\n    webSocketisConnected = false;\n    webSocketisError = false;\n    isLoggin = false;\n    authToken = null;\n    eventListener = {};\n    base_url = \"\"\n    constructor(){\n        this.headersList = {\n            headers:{\"Content-Type\": 'application/json'},\n        };\n        //check for login changes\n        when (\n            //when we know the user is logged then run the predicate\n            ()=>{\n                return this.isLoggedIn;\n            },\n            ()=>{\n                this.setUpWebSocket();\n            }\n\n        \n        )\n        this.checkUserLoggedIn().then(user=>{\n            if (user != null){\n                this.setLoggedIn(true);\n            }\n            else {\n                this.setLoggedIn(false);\n            }\n        })\n        \n    }\n    /**\n     * Handlier Adding Event For Varius Application Such As Message\n     */\n    addEventListenerHandlier(eventType = null, functionHandlier =null){\n\n        if (eventType === null | functionHandlier === null | !eventType instanceof String){\n        // it's a string){\n            console.log(\"Cannot Add Empty Event Or Handliers or null or not string\");\n        }\n        else {\n            let arrayHandliers = this.eventListener[eventType];\n            if (arrayHandliers !== null & typeof arrayHandliers !== 'undefined' ){\n                //push an an event  to the current event handier queue\n                arrayHandliers.push(functionHandlier);\n            }\n            else {\n                this.eventListener[eventType] = [];\n                this.eventListener[eventType].push(functionHandlier)\n            }\n\n\n        }\n        \n        \n    }\n    //handles events from the web-socket\n    eventReceiverHandlier =(event)=>{\n        let eventJson = JSON.parse(event.data);\n        let eventType = eventJson.type.trim().toLowerCase();\n        if (typeof eventType !== 'undefined' | eventType !== null ){\n            let arrayHandliers= this.eventListener[eventType];\n            if (arrayHandliers !== null | typeof arrayHandliers !== 'undefined' ){\n                arrayHandliers.forEach(handlier=>{\n                    try {\n                        if (handlier.length  < 1){\n                            handlier();\n                        }\n                        else {\n                            handlier(eventJson);\n                        }\n                    }\n                    catch(error){\n                        console.log(error);\n                    }\n                })\n            }\n        }\n    }\n    get isLoggedIn(){\n        return this.isLoggin;\n    }\n    //action sets the user loggined flag\n    //  isLoggedIn(bool){\n    //     this.isLoggin = bool;\n    // }\n    ///send message vio websocket to the host\n    sendMessageWebSocket(message){\n         //add message type \n         return new Promise((resolve,reject)=>{\n             //if we are connected to the server\n            if (this.webSocketisConnected){\n                message['type'] = \"message\"\n                message = JSON.stringify(message)\n                this.reconnectingWebSocket.send(message);\n                resolve(true); //we were able to send the message\n            }\n            else { //we are not connected to the server \n                reject(false);\n            }\n         })\n        \n    }\n\n    setWebSocketError(value){\n        this.webSocketisError = value;\n    }\n    setLoggedIn(value){\n        this.isLoggin = value;\n    }\n    setConnectedWebSocketFlag(value){\n       this.webSocketisConnected = true;\n    }\n  \n    async setUpWebSocket(){\n        \n        let url = `ws://127.0.0.1:8000/ws/messenger/?token=${this.authToken}`;\n        this.reconnectingWebSocket = new ReconnectingWebSocket(url);\n        this.reconnectingWebSocket.addEventListener('open', () => {\n            console.log(\"Connected To WebSocket\");\n            this.setConnectedWebSocketFlag(true);\n            //this.setErrorWebSocketFlag(false);\n        });\n\n        this.reconnectingWebSocket.addEventListener('error', (error) => {\n            console.log(error);\n            this.setConnectedWebSocketFlag(false);\n            //this.setErrorWebSocketFlag(true);\n        });\n\n        this.reconnectingWebSocket.addEventListener('close', (mssg) => {\n            console.log(\"Disconnected To WebSocket\");\n            this.setConnectedWebSocketFlag(false);\n        });\n        this.reconnectingWebSocket.addEventListener('message', this.eventReceiverHandlier )\n            \n          \n        \n    }\n    //\n    static async createWithLoginToken(usernamePassWord=null){\n       \n       let  messageService = new MessengerService();\n       await messageService.getLoginToken(usernamePassWord.username, usernamePassWord.password).then(mssg=>{\n           console.log(\"hbfhjfhjejehjhefvh\");\n       }).catch(error=>{\n           console.log(error);\n       });\n       return messageService;\n    }\n    getContacts(){\n        return axios.get('http://127.0.0.1:8000/user/api/users/active_contacts/',\n        this.headersList\n        ).then((response)=>{\n                return response.data;\n            }\n        )\n      \n    }\n    getPendingContacts(){\n        return axios.get('http://127.0.0.1:8000/user/api/users/pending_contacts/',\n        this.headersList\n        ).then((response)=>{\n            return response.data;\n        }\n        )\n        \n    }\n\n    getMessages(){\n        return axios.get('http://127.0.0.1:8000/api/message/',\n        this.headersList\n        ).then((response)=>{\n            return response.data;\n        }\n        );\n    }\n\n    getLoginToken(username=null, password=null, callBack = null){\n        if (username == null || password == null){\n            return new Promise((resolve, reject)=>{\n                if (this.tokenHeaderReady){\n                    resolve(true);\n                }\n                else {\n                    reject(false);\n                }\n            })\n        }\n        //login the given user correct \n        return  axios.post('http://127.0.0.1:8000/user/api/auth/login/',\n        {\"username\":username, \"password\": password},\n        this.headersList\n        ).then((response)=>{\n            let userLoginInfo = response.data;\n            this.headersList.headers[\"Authorization\"] = `Token ${userLoginInfo.token}`;\n            this.tokenHeaderReady = true;\n            this.authToken = userLoginInfo.token;\n            this.setLoggedIn(true)\n            return this.headersList.headers[\"Authorization\"];\n            \n        });\n        \n    }\n    //send a request to the api to reject the given user contact request with the given uuid\n    //**\n    /* \n     * @param {*} user_uuid accepted user uuid \n     */\n\n    acceptContactRequest(user_uuid){\n        let putRequest = `http://127.0.0.1:8000/api/pending-contacts/${user_uuid}/`\n        return axios.put(putRequest,{},this.headersList ).then(response=>{\n            ///if the resource was modified then return the user data\n            if (response.status === 200){\n                return response.data;\n            }\n            //else return a false;\n            else {\n                return false;\n            }\n        });\n    }\n    //send a request to the api to reject the given user contact request with the given uuid\n    //**\n    /* \n     * @param {*} user_uuid rejected user uuid \n     */\n    denyContactRequest(user_uuid){\n        console.log(user_uuid);\n        console.log(this.headersList);\n        let putRequest = `http://127.0.0.1:8000/api/pending-contacts/${user_uuid}/`\n        return axios.delete(putRequest,this.headersList ).then(response=>{\n            ///if the resource was modified then return the user data\n            if (response.status === 200){\n                return response.data;\n            }\n            //else return a false;\n            else {\n                return false;\n            }\n        });\n    }\n    /**\n     * Queiries the api for user with the given pattern match querySearch - Will Not Return user already pending or contact\n     * @param {*} querySearch  - the get param for api user queries search \n     */\n    searchUsers(querySearch){\n        return axios.get(`http://127.0.0.1:8000/api/users/?search=${querySearch}`, this.headersList).\n            then(response=>{\n                return response.data;\n        })\n    }\n    //send a contact request to the user with the given uuid\n    sendContactRequest(userUUID){\n        \n        return  axios.post('http://127.0.0.1:8000/api/pending-contacts/',\n        {\"uuid\":userUUID},\n        this.headersList\n        ).then((response)=>{\n           return response;\n           \n        });\n        \n    }\n    //queries for the next user search query\n    getNextUsersSet(queryString){\n        return axios.get(queryString, this.headersList).\n        then(response=>{\n            return response.data;\n        })\n    }\n    /**Check if the user is logged in using the api \n     * \n        \n     */\n    checkUserLoggedIn(){\n        return this.checkLoggedInAPI().then(response=>{\n            //user is logged\n            if (response.status === 200 && response.data.isLoggedIn === true ){\n                return response.data.user\n            }\n            else {\n                return null;\n            }\n        })\n    }\n    checkLoggedInAPI(){\n        return axios.get(\"http://127.0.0.1:8000/api/auth/islogin/\", this.headersList).\n            then(response=>{\n                return response;\n            })\n    }\n\n\n\n\n\n\n   \n    // initAPI(){\n\n        \n          \n    // }\n    // initWebSocket(){\n        \n    // }\n}\n\n\ndecorate(MessengerService, {\n    isLoggin :observable,\n    webSocketisConnected : observable, \n    setConnectedWebSocketFlag: action,\n    setLoggedIn: action,\n    setWebSocketError: action,\n    isLoggedIn: computed,\n\n})\nexport default MessengerService","//IMPORTS\nimport {observable} from \"mobx\"\nimport { decorate } from 'mobx';\nimport { action } from 'mobx';\n//Model The Users Contacts And Potential Contacts\nexport default class UserModel {\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    username = null;\n    //User Information\n    uuid = null\n    user_image=null\n    store = null;\n    areActiveContact=null;\n    extraMeta = {}\n    constructor(storeOwner, userJsonInfo, areActiveContact=null) {\n        this.store = storeOwner;\n        //console.log(storeOwner);\n        this.username = userJsonInfo.username;\n        this.uuid = userJsonInfo.uuid;\n        this.username = this.username;\n        if (areActiveContact){\n            this.areActiveContact =  true;\n        }\n        else {\n            this.areActiveContact =  false;\n        }\n    }\n    /**\n     * \n     * @param {*} data - Json Data To Be Merged With The Current Meta Data\n     */\n    setExtraMeta(data){\n        //merge the two data sources together\n        this.extraMeta = {...this.extraMeta, ...data};\n    }\n    get getExtraMeta(){\n        return this.extraMeta;\n    }\n    acceptRequest(){\n        if (this.areActiveContact === false){\n            this.store.requestAcceptHandlier(this);\n        }\n        else {\n            //more feats maybe error handling\n        }\n    }\n    rejectRequest(){\n        if (this.areActiveContact === false){\n            this.store.requestDenyHandlier(this);\n            \n        }\n        else {\n            //more feats maybe error handling\n        }\n    }\n    sendContactRequest(){\n        //make user request \n        this.store.sendContactRequest(this);\n    }\n    setUserActive() {\n        if (this.store){\n            this.store.setActiveContact(this);\n            //console.log(\"Done Setting User Active\");\n        }\n        else {\n            //console.log(\"No Store Attached To This Model\");\n        }\n    }\n    //Update The Current User Based On Pass Json Object\n    upDate(jsonData){\n        this.username = this.username;\n        this.user_image = this.user_image;\n        this.uuid = this.uuid;\n    }\n    /**\n     * Convert The Internel Data to A Json Object\n     */\n    asJson(){\n        return {\n            uuid: this.uuid,\n            username:this.username,\n            user_image:this.user_image,\n\n        }\n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        return `UUID: ${this.uuid} \n                USERNAME: ${this.username} \n                USER IMAGE:${this.user_image} \n                Active:${this.areActiveContact ? \"Active\" : \"Inactive\"}`\n        \n    }\n}\n\ndecorate(UserModel, {\n    extraMeta : observable,\n    setExtraMeta:action\n})","import UserModel from \"../Models/UserModel\"\nimport { observable, computed, action, decorate, configure} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n/**\n * Provides A Search User Store Implementation For Search For Users Using The RestAPI\n */\nexport default class SearchUserStore{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    searchedUsers = []; //observable list of searched users \n    nextQueryAddress= null ; // the next query string users \n    uiSideBar= null; //ui store \n    transporLayer = null; //messenger service layer\n    loadingUsers= false; //flag represents if the users are being currenlty loaded\n    loadUserError=false; //check if the users where loaded \n    constructor(store=null,transporLayer=null, uiStore= null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.uiStore = uiStore;\n        \n    }\n    //user loaded from search \n    get getloadingUser() {\n        return this.loadingUsers;\n    }\n    //user search result in error or not \n    get getloadingUserError() {\n        return this.loadUserError;\n    }\n    //get the next query string for currently search \n    get getNextQueryAddress(){\n        return this.nextQueryAddress;\n    }\n    //get a computed set of searched users\n    get getSearchedUsers(){\n        if (this.searchedUsers.length < 1){\n            return false;\n        }\n        else {\n            return this.searchedUsers;\n        }\n    }\n    //sets the list of user by added the  newly search api results to the current set \n    setSearchUsers(listUser){\n        let mappedUsers = listUser.map(user=>{\n            let userModelInstance = new UserModel(this,user,false);\n            userModelInstance.setExtraMeta(\n                {\"canSendRequest\": true}\n            );\n            return userModelInstance;\n        });\n        this.searchedUsers.push(...mappedUsers);\n    }\n    //makes a request to the server api for list user with matching queries emptying the current search  ie new search \n    searchForUsers(){\n        let searchUserQuery = this.uiStore.getSearchString;\n        //cannot make empty string queries\n        if (searchUserQuery.trim().length < 1 ){\n            return;\n        }\n        //reset query to empty\n        this.loadingUsers = true;\n        this.searchedUsers = []\n        this.loadUserError = false;\n        this.transporLayer.searchUsers(searchUserQuery).then(action(data=>{\n            this.setSearchUsers(data.results);\n            this.nextQueryAddress = data.next;\n            this.loadUserError = false;\n            this.loadingUsers = false;\n        })).catch(action(error=>{\n            this.loadUserError = true;\n            this.loadingUsers = false;\n        }));\n    }\n    /**\n     * \n     * @param {*} useModel reference to a user model..Processes A Request\n     */\n    sendContactRequest(userModel){\n        this.transporLayer.sendContactRequest(userModel.uuid).then(action(data=>{\n            if(data.status === 201){\n                this.searchedUsers=this.searchedUsers.filter(user=>{\n                    return user.uuid !== userModel.uuid\n                });\n            }\n            else if(data.status!==201 &&  data.status < 300){\n                userModel.setExtraMeta({\"canSendRequest\": false});\n                \n            }\n        }));\n    }\n    //loads the next set of users from the rest api \n    getNextDataSet(){\n        this.transporLayer.getNextUsersSet(this.nextQueryAddress)\n        .then(action(data=>{\n            this.setSearchUsers(data.results);\n            this.nextQueryAddress = data.next;\n        })).catch(error=>{\n\n        });\n    }\n\n    //Load contacts active and pending from the server using the transport layer\n   \n}\n\ndecorate(SearchUserStore, {\n     searchedUsers:observable,\n     setSearchUsers: action,\n     getNextDataSet : action,\n     apiSearch : action,\n     getloadingUser: computed,\n     getloadingUserError: computed,\n     getSearchedUsers: computed,\n     searchForUsers: action,\n     loadingUsers : observable,\n    loadUserError:observable,\n\n})","import UserModel from \"../Models/UserModel\"\nimport { observable, computed, action, decorate, configure, when} from \"mobx\";\nimport SearchUserStore from './SearchUserStore';\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\nexport default class UserStore {\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    currentActiveUser=  null;// {usename:null, uuid:null};\n    activeContacts = []\n    pendingContacts = []\n    isLoadingActiveContactsFlag= true//observable.box(true);\n    isLoadingPendingContactsFlag= true //observable.box(true);\n    loadingActiveError= false;\n    loadingPendingError= false;\n    transporLayer = null;\n    searchStore  = null;\n    constructor(store=null,transporLayer=null,uiStore=null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.searchStore = new SearchUserStore(this,this.transporLayer,uiStore);\n        when(\n            ()=>{\n                \n                return this.transporLayer.isLoggedIn;\n                \n            }, \n            ()=>{\n                //if the user is logged in then \n                \n                   \n                    this.asyncLoadData().then(code=>{\n                        console.log(code);\n                    }).catch(error=>{\n                        console.log(error);\n                    })\n               \n            })\n        //this.loadContacts();ls   \n    }\n    //Load contacts active and pending from the server using the transport layer\n    loadData(){\n       \n        this.loadContacts();\n        this.loadPendingContacts();\n    }\n    async asyncLoadData(){\n        try{\n            await this.loadContacts();\n            await this.loadPendingContacts();\n            return true\n        }\n        catch(error){\n            return false;\n        }\n        \n    }\n    get getSearchUserStore(){\n        return this.searchStore;\n    }\n    //set loading flags \n    setLoadingActive(bool){\n        this.isLoadingActiveContactsFlag = bool;\n    }\n    //set loading flags \n    setLoadingPending(bool){\n        this.isLoadingPendingContactsFlag = bool;\n    }\n\n    get getIsLoadingActive(){\n        return this.isLoadingActiveContactsFlag;\n    }\n\n    get getIsLoadingPending(){\n        return this.isLoadingPendingContactsFlag;\n    }\n    //return if there was an error loading  active contacts\n    get getLoadingActiveError(){\n        return this.loadingActiveError;\n    }\n    //return if there was an error loading  active contacts\n    get getLoadingPendingError(){\n        return this.loadingPendingError;\n    }\n    //set user object using model rather than a json object\n    setUserModel(modelObject, isActive=true){\n        if (isActive === true){\n            let foundUser = this.activeContacts.find((element)=>{\n                return element.uuid === modelObject.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(modelObject);\n            }\n            else {\n                this.activeContacts.push(modelObject);\n            }\n            \n        }\n        else {\n            let foundUser = this.pendingContacts.find((element)=>{\n                return element.uuid === modelObject.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(modelObject);\n            }\n            else {\n                this.pendingContacts.push(modelObject);\n            }\n        }\n    }\n    \n    setUser(user, isActive=true){\n        if (isActive === true){\n            let foundUser = this.activeContacts.find((element)=>{\n                return element.uuid === user.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(user);\n            }\n            else {\n                this.activeContacts.push(new UserModel(this,user,true));\n            }\n            \n        }\n        else {\n            let foundUser = this.pendingContacts.find((element)=>{\n                return element.uuid === user.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(user);\n            }\n            else {\n                this.pendingContacts.push(new UserModel(this,user,false));\n            }\n        }\n    }\n\n    loadContacts(){\n        this.setLoadingActive(true);\n        \n        return this.transporLayer.getContacts().then(usersContactList=>{\n                //console.log(usersContactList);\n                if (usersContactList.length === 0){\n                    this.setLoadingActive(false);\n                    return;\n                }\n                usersContactList.forEach(user => {\n                    this.setUser(user,true);\n                });\n                this.setLoadingActive(false);\n                return;\n            }\n        ).catch(error=>{\n            console.log(error);\n            this.loadingActiveError = true;\n        })\n    }\n    loadPendingContacts(){\n        this.setLoadingPending(true);\n        return this.transporLayer.getPendingContacts().then(usersContactPendingList=>{\n                if (usersContactPendingList.length === 0){\n                    this.setLoadingPending(false);\n                    return;\n                }\n                usersContactPendingList.forEach(user => {\n                    this.setUser(user,false);\n                });\n                this.setLoadingPending(false);\n                return;\n            }\n            \n        ).catch(error=>{\n            console.log(error);\n            this.loadingPendingError = true;\n        })\n\n    }\n    setActiveContact(idUsername){\n     \n        if (this.activeContacts.length === 0 || idUsername === null){\n            return false; \n        }\n        else {\n            //console.log(idUsername);\n            let user = this.activeContacts.find((user)=>{\n                return user.uuid === idUsername.uuid || user.username === idUsername.username;\n            });\n            //console.log(\"Found User\" + user);\n            //console.log(user.asJson());\n            if (user === null){\n                return false;\n            }\n            else {\n                //console.log(\"Came here somehow\");\n                this.currentActiveUser = user;\n                this.generateActiveUserList()\n                return true;\n            }\n        }\n    }\n    get listActiveContacts(){\n        if (this.activeContacts.length === 0){\n            return false;\n        }   \n        else{\n            return this.activeContacts;\n            \n            \n        }\n    }\n    get listPendingContacts(){\n        if (this.pendingContacts === null || this.pendingContacts.length === 0){\n            return false;\n        }   \n        else{\n            return this.pendingContacts;\n            \n            \n        }\n    }\n\n    requestAcceptHandlier(userModel){\n        this.transporLayer.acceptContactRequest(userModel.uuid).then(action(response=>{\n            //if the request was accepted Contact made active\n            if (response){\n                //splice  from pending here\n                userModel.areActiveContact=true;\n                let modifiledPending= this.pendingContacts.filter(element=>{\n                    return element.uuid !== userModel.uuid;\n                });\n                this.pendingContacts.replace(modifiledPending);\n                this.setUserModel(userModel, userModel.areActiveContact);\n            }\n            else {\n\n            }\n        })\n        )\n    }\n    //Accept A Model To Accepted Into The Active List Of Contacts\n    //Handles Accepting Of Contact Request\n    requestDenyHandlier(userModel){\n        this.transporLayer.denyContactRequest(userModel.uuid).then(action(response=>{\n            //if the request was accepted Contact made active\n            if (response){\n                //splice  from pending here\n                let modifiledPending= this.pendingContacts.filter(element=>{\n                    return element.uuid !== userModel.uuid;\n                });\n                this.pendingContacts.replace(modifiledPending);\n            }\n            else {\n\n            }\n        })\n        )\n    }\n    \n    generateActiveUserList() {\n       let newUsersActives = this.activeContacts.filter(item=>{\n           return item.uuid !== this.currentActiveUser.uuid;\n       });\n       newUsersActives.unshift(this.currentActiveUser);\n       this.activeContacts = newUsersActives;\n    }\n\n\n    /**\n     * Convert The Internel Data to A Json Object\n     */\n    asJson(){\n      return {\n          \"activeContacts\": this.activeContacts.map((user)=>{\n              return user.asJson();\n          }),\n          \"pendingContacts\": this.pendingContacts.map((user)=>{\n            return user.asJson();\n          }),\n        }\n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        \n    }\n}\n\ndecorate(UserStore , {\n    activeContacts : observable,\n    pendingContacts : observable,\n    isLoadingActiveContactsFlag: observable,\n    isLoadingPendingContactsFlag: observable,\n    setUser: action,\n    loadContacts: action,\n    setLoadingActive : action,\n    setLoadingPending : action,\n    listActiveContacts : computed,\n    setActiveContact : action,\n    loadingActiveError: observable,\n    loadingPendingError: observable,\n    listPendingContacts: computed, \n    currentActiveUser:observable,\n    requestAcceptHandlier : action,\n    requestDenyHandlier: action,\n    getLoadingActiveError : computed,\n    getLoadingPendingError: computed,\n    getIsLoadingPending : computed,\n    getIsLoadingActive: computed\n})","import { observable, computed, action, configure, decorate} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\n\n/**\n * This Class Acts As A Store For SideBar UI state\n */\n\n//UI Store Storeses Various States Of THe UI From Side Bar To Main Content\nclass UIUserStore {\n    viableStates =\n    [\n        {\"ACTIVECONTACTS\": 1 ,\n            \n                \"uiName\":\"Active Contacts\",\"stateName\": \"ACTIVECONTACTS\"\n            \n        },\n        {\"PENDINGCONTACTS\": 2,\n            \n                \"uiName\":\"Pending Contacts\",\"stateName\": \"PENDINGCONTACTS\"\n            \n        },\n        {\"SEARCHPENDING\": 3,\n            \n                \"uiName\":\"Search Contacts\",\"stateName\": \"SEARCHPENDING\"\n            \n        },\n    ]\n    activeElement= \"ACTIVECONTACTS\";\n    isActive = true;\n    store = null\n    /**\n     *\n     * @param {*} store -The Root Store Of The UI-also allow certain depeencies to be injected\n     */\n    searchString = \"\";\n    constructor(store=null){\n        this.store = store;\n    }\n    get getActiveElement(){\n        return this.activeElement;\n    }\n    get getIsActive(){\n        return this.isActive;\n    }\n    get getSearchString(){\n        return this.searchString;\n    }\n    setsearchString(txt){\n        \n        this.searchString = txt;\n    }\n\n    toggleSideBarActive(){\n        this.isActive = !this.isActive;\n    }\n\n    get getViableStates(){\n        return this.viableStates;\n    }\n    setActiveElement(state){\n        if (state != null ){\n            if (state === this.activeElement){\n                this.searchString = \"\";\n            }\n            this.viableStates.forEach(element => {\n                if (state in element){\n                    if (state !== this.activeElement){\n                        this.searchString = \"\";\n                    }\n                    this.activeElement = state;\n                    \n\n                }\n            })\n        }\n        else{\n            console.log(\"Null Given For State: Error\");\n        }\n        \n    }\n\n}\n\ndecorate(UIUserStore,\n    {\n    activeElement: observable,\n    isActive: observable,\n    getActiveElement: computed,\n    getIsActive : computed,\n    toggleSideBarActive: action,\n    setActiveElement: action,\n    searchString: observable,\n    getSearchString : computed,\n    setsearchString : action,\n    }\n)\n\nexport default  UIUserStore;","\nimport { observable, computed, action, decorate, configure} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\n\n\nclass MessagesModel{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    /**\n     * User UUID-C\n     */\n    user = null;\n    messages =  [];// {usename:null, uuid:null};\n    \n    constructor(store=null, user=null){\n        this.store = store;\n        \n        this.user = user\n        // console.log(this.asJson())\n    }\n\n    get getMessages(){\n        return this.userMesages;\n    }\n\n    \n    addMessage(mssgJson){\n       \n       if ((mssgJson.to_User === this.user.uuid || mssgJson.from_User === this.user.uuid) ){\n            this.messages.push(mssgJson)\n        }\n    }\n\n    \n    bulkAddMessages(arrayMessage){\n       \n        arrayMessage.forEach(mssg=>{\n            this.addMessage(mssg);\n        })\n        //console.log(this.messages)\n    }\n    asJson(){\n      return {\n          'user':this.user.uuid, 'messages' : this.messages\n        };\n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        \n    }\n}\n\ndecorate(MessagesModel, {\n    messages: observable,\n    addMessage : action,\n    getMessages: computed, \n    bulkAddMessages: action,\n\n})\n\nexport default MessagesModel;","import MessagesModel from \"../Models/MessagesModel\"\nimport { observable, computed,\n        action, decorate, \n        configure, reaction, when} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\n\n//Manages User Messages Store Data Oritented Container To Manager User Message\nclass UserMessageStore{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    userMesagesModels =  {};// list of users json and there corrsponing messages \n    isLoadingMesagesFlag= true // if loading messages from server and setting up\n    loadingMessagesError= false; // error loading messages\n    transporLayer = null;\n    userStore=null\n    //This is the message with user that will be sent over websocket\n    contructedMessage = {toUser: null , message : \"\"};\n    constructor(store=null,transporLayer=null, userStore=null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.userStore = userStore;\n        if (this.store != null){\n            //react to active user changes \n            //reset message content\n            // reaction to ActiveUSer\n            reaction ( \n                ()=>{\n                    return this.store.userStore.currentActiveUser;\n                }, \n                user=>{\n                    this.setMessageText(\"\");\n                    this.setMessageUser(user);\n                    // console.log(this.contructedMessage)\n                }\n             )\n            if (this.transporLayer!== null){\n                this.transporLayer.addEventListenerHandlier(\n                    \"message\",this.receiveMessage\n                    )\n            }\n        }\n        ///if we got a valid userstore\n        // getLoadingActiveError : computed,\n        if (this.userStore != null ){\n            when(\n                ()=>{\n                    \n                    return !this.userStore.getLoadingActiveError && !this.userStore.getIsLoadingActive;\n                }, \n                ()=>{\n                    this.setContactUsers(this.userStore.listActiveContacts).then(status=>{\n                        if (status === true){\n                            this.loadMessages();\n                        }\n                        else{\n                            return;\n                        }\n                        \n                    }).catch(error=>{\n                        console.log(error)\n                    })\n                }\n            \n            )\n        }\n        \n    }\n    receiveMessage = (event)=>{\n        let to_UserModel = this.userMesagesModels[event.to_User];\n        let from_UserModel = this.userMesagesModels[event.from_User]\n        console.log(this.userMesagesModels);\n        if (to_UserModel !== null & typeof to_UserModel !== \"undefined\"){\n            to_UserModel.addMessage(event);\n        }\n        else if (from_UserModel !== null & typeof from_UserModel !== \"undefined\"){\n            from_UserModel.addMessage(event);\n        }\n        else {\n           \n        }\n    }\n    //sends the current message \n    sendMessage(){\n        //make sure the current active user and the cached message are the same\n        if (this.contructedMessage.toUser === null){\n            return;\n        }\n        if (this.contructedMessage.toUser.uuid === this.store.userStore.currentActiveUser.uuid \n            & this.contructedMessageInternelMessage.trim().length > 0 ){\n            let messageJson = this.constructMessageToSend() \n            console.log(messageJson);\n            this.transporLayer.sendMessageWebSocket(messageJson).then(status=>{\n                this.setMessageText(\"\");\n            }).catch(error=>{\n\n            });\n\n        }\n        //seems they are not in sync time to fix that \n        else{\n            console.log(\"reset\");\n            this.setMessageText(\"\");\n            this.setMessageUser(this.store.userStore.currentActiveUser);\n        }\n    }\n    constructMessageToSend(){\n        let messageAsJson = {\n            toUser: this.contructedMessage.toUser.uuid,\n            message : this.contructedMessage.message.trim()\n        }\n        return messageAsJson;\n    }\n    get contructedMessageInternelMessage(){\n        return this.contructedMessage.message;\n    }\n    ///get the message for the current active user\n    \n    get getMessagesActiveUser(){\n        if (this.contructedMessage.toUser){\n            let activerUser = this.contructedMessage.toUser;\n            if (activerUser.uuid in this.userMesagesModels){\n                return this.userMesagesModels[activerUser.uuid];\n            }\n            else {\n                this.setContactSingle(activerUser)\n                return this.userMesagesModels[activerUser.uuid];\n            }\n        }\n        else {\n            console.log(\"no active User\");\n            return null;\n        }\n    }\n    setMessageText(textMessage){\n        this.contructedMessage.message = textMessage\n    }\n    setMessageUser(currentActiveUser){\n        this.contructedMessage.toUser = currentActiveUser;\n    }\n\n    setContactSingle(userContact){\n        if (!(userContact.uuid in this.userMesagesModels)){\n            let userUUID = userContact.uuid;\n            this.userMesagesModels[userUUID] = new MessagesModel(this,userContact);\n        }\n        //might need to make a query to get your messages \n         \n    }\n    setContactUsers(listContactUser){\n        return new Promise((resolve, reject)=>{\n            this.userMesagesModels = {}\n            if (listContactUser.length > 1){\n                listContactUser.forEach(user=>{\n                    let userUUID = user.uuid;\n                    this.userMesagesModels[userUUID] = new MessagesModel(this,user)\n                })\n                resolve(true);\n            }\n            else {\n                reject(false);\n            }\n        \n            \n        })\n        \n        \n    }\n    //This returns all the message it is up to the client to  sort what group of messages then want\n    get getMessages(){\n        return this.userMesagesModels;\n    }\n    async loadMessages(){\n        if (this.userMesagesModels != null ){\n            \n            return this.transporLayer.getMessages().then(mssgsJson=>{\n                for (let key in this.userMesagesModels){\n                    this.userMesagesModels[key].bulkAddMessages(mssgsJson);\n                }\n               \n            })\n        }\n    }\n    get getContructedMessage(){\n        return this.contructedMessage;\n    }\n    asJson(){\n      return {\n\n          \"MessageModel\" : this.userMesagesModels\n\n          }\n        \n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        \n    }\n}\n\ndecorate(UserMessageStore, {\n    userMesagesModels: observable,\n    isLoadingMesagesFlag:observable, \n    loadingMessagesError:observable,\n    setContactUsers : action,\n    getMessages: computed,\n    contructedMessage : observable,\n    getContructedMessage: computed,\n    setMessageText : action,\n    contructedMessageInternelMessage : computed,\n    setMessageUser: action,\n    sendMessage : action,\n    getMessagesActiveUser: computed,\n    setContactSingle: action\n\n})\n\nexport default UserMessageStore;","import { observable, computed, action, decorate, configure, reaction} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Provides A Store For User Login And Logout System Communticates With The Messenger Service\nexport default class LogInStore{\n    \n    /* \n     * @param {*} store - store manager manages this store instance \n     * @param {*} transporLayer  - the messenger service transporLayer\n     * @param {*} uiStore- uid store layer \n     */\n    constructor(store=null,transporLayer=null, uiStore= null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.uiStore = uiStore;\n        //check if the user is already loggin i.e session authenication\n        \n    }\n    //handles loggin in the user from the transport layer side of things \n    logInUser(username=null, password=null){\n        //Does allow empty username and passwords\n        if (username == null || password == null){\n            ///\n        }\n        else {\n            this.transporLayer.getLoginToken(username=username, password=password).then(flag=>{\n                if (flag===true){\n                    console.log(\"we Log in \");\n                }\n                else {\n\n                }\n            })\n        }\n    }\n    /**\n     * returns if the current user is logged in or not \n     */\n    get isLoggedIn(){\n        if (this.transporLayer != null){\n            return this.transporLayer.isLoggedIn\n        }\n        else {\n            return false;\n        }\n    }\n\n    //Load contacts active and pending from the server using the transport layer\n   \n}\n\ndecorate(LogInStore, {\n    isLoggedIn: computed,\n    logInUser: action\n})","\nimport {configure} from \"mobx\";\nimport  MessengerService  from \"../Sevices/MessengerService\"\nimport UserStore from \"./UserStore\"\nimport UIUserStore from \"./UIUsersStore\"\nimport UserMessageStore from \"./UserMessagesStore\"\nimport LogInStore from './LoginStore';\nconfigure({ enforceActions: 'observed' })\n/**\n * Root Store - Top Manager For Every Store Provides Dependecy Control And Injections \n */\nexport default class RootStore {\n    transportLayer = null;\n    userStore = null;\n    uiSideBarStore = null;\n    /**\n     * \n     * @param {*} store - tries to log in the user if a user name and passord is given (to be scrapped)\n     * @param {*} userNamePassword \n     */\n    constructor(store=null, userNamePassword=null){\n        this.transportLayer = new MessengerService();\n        this.uiUserStore = new UIUserStore(this);\n        this.userStore = new UserStore(this,this.transportLayer, this.uiUserStore );\n        this.userMessageStore = new UserMessageStore(this,this.transportLayer,this.userStore);\n        this.logInStore = new LogInStore(this,this.transportLayer,this.uiSideBarStore);\n        this.startAsyncServices().then((num)=>{\n        }).catch(error=>{\n            console.log(error);\n        })\n    }\n    //Start Async Services That are need as soon a \n    async startAsyncServices(){\n        //await this.transportLayer.getLoginToken(\"Devano\", \"11kingie\");\n        //await this.userStore.asyncLoadData();\n        //await this.userMessageStore.setContactUsers(this.userStore.listActiveContacts)\n        //await this.userMessageStore.loadMessages();\n        return true;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport RootStore from \"./Messenger/Stores/rootStore\"\n\nlet  rootStoreInstance = new RootStore(null,null);\n\nReactDOM.render(\n<Provider rootStore = {rootStoreInstance}>\n<App />\n</Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}