{"version":3,"sources":["Messenger/Componets/TogglerComponet/Toggler.js","Messenger/Componets/Search/Search.js","Messenger/Componets/ActiveUsers/ActiveUser.js","Messenger/Componets/LoadingSpinner/SpinnerComponet.js","Messenger/Componets/ActiveUsers/ActiveUsers.js","Messenger/Componets/PendingUsers/PendingUser.js","Messenger/Componets/PendingUsers/PendingUsers.js","Messenger/Componets/ActiveUserToggler/ActiveUserComponetToggler.js","Messenger/Componets/SearchUsers/SearchedUser.js","Messenger/Componets/SearchUsers/SearchedUsersComponet.js","Messenger/Componets/SideBar.js","Messenger/Componets/Login/LoginComponet.js","Messenger/Componets/NavComponet/NavComponet.js","Messenger/Componets/Messages/MessageInstanceComponet.js","Messenger/Componets/Messages/MessageListComponet.js","Messenger/Componets/Messages/MessageComponet.js","Messenger/Componets/MessagingInput/MessengerTextArea.js","Messenger/Componets/textBoxMessageComponet.js","Messenger/Componets/MainContent.js","App.js","serviceWorker.js","Messenger/Sevices/MessengerService.js","Messenger/Models/UserModel.js","Messenger/Stores/SearchUserStore.js","Messenger/Stores/UserStore.js","Messenger/Stores/UIUsersStore.js","Messenger/Models/MessagesModel.js","Messenger/Stores/UserMessagesStore.js","Messenger/Stores/LoginStore.js","Messenger/Stores/rootStore.js","index.js"],"names":["Toggler","props","onClickHandlier","className","onClick","Search","this","value","onChange","children","searchHandlier","type","icon","faSearch","Component","ActiveUser","setActive","user","setUserActive","href","src","alt","username","observer","SpinnerComponet","animation","size","role","ActiveUsers","rootStore","searchText","activeUsers","userStore","listActiveContacts","getIsLoadingActive","filter","item","toLowerCase","includes","map","key","uuid","inject","PendingUser","acceptRequest","denyRequest","rejectRequest","PendingUsers","pendingUsers","listPendingContacts","getIsLoadingPending","ActiveUserComponetToggler","stateChangeHandler","viableStates","viableState","id","stateName","uiName","SearchedUser","sendContactRequest","canAddStatus","getExtraMeta","canSendRequest","SearchedUsers","handlierLoadMoreUsers","event","searchUserStore","getNextDataSet","ulRefSearchedUsers","React","createRef","heightList","searchUsers","getSearchedUsers","loading","getloadingUser","moreUsersLoad","getNextQueryAddress","ref","faChevronDown","SideBar","toggleActiveSideBar","uiUserStore","toggleSideBarActive","setSearchText","setsearchString","target","searchForUser","getSearchUserStore","searchForUsers","setUserUiState","state","setActiveElement","userStateUI","getActiveElement","getViableStates","searchString","getSearchString","toRender","SearchedUsersComponet","getIsActive","error","errorInfo","setState","console","log","LoginComponet","logInHandlier","logInStore","logInUser","password","onChangeEmail","onChangePassword","handleClose","setShow","handleShow","bool","previousState","show","variant","isLoggedIn","onHide","Header","closeButton","Title","Body","Group","controlId","Label","Control","placeholder","Text","Check","label","NavComponet","toggleSideBarState","MessageInstanceComponet","message","activeUser","orientationString","from_User","fullClassOrientation","MessageListComponet","ulRef","current","scrollTop","scrollHeight","messages","mssg","MessageComponet","currentActiveUser","userMessageStore","getMessagesActiveUser","objectToRender","uuidUser","userModelMessages","MessengerTextArea","textInputEnter","onEnter","sendMessageHandlier","code","addEventListener","text","onTextChange","TextBoxMessageComponet","messgObject","contructedMessageInternelMessage","MainContent","setMessageToSend","messageText","trim","length","setMessageText","sendMessage","App","Boolean","window","location","hostname","match","configure","enforceActions","MessengerService","tokenHeaderReady","reconnectingWebSocket","webSocketisConnected","webSocketisError","isLoggin","authToken","eventListener","base_url","eventReceiverHandlier","eventJson","JSON","parse","data","eventType","arrayHandliers","forEach","handlier","headersList","headers","when","setUpWebSocket","functionHandlier","String","push","Promise","resolve","reject","stringify","send","url","ReconnectingWebSocket","setConnectedWebSocketFlag","axios","get","then","response","post","userLoginInfo","token","setLoggedIn","user_uuid","putRequest","put","status","delete","querySearch","userUUID","queryString","usernamePassWord","messageService","getLoginToken","catch","decorate","observable","action","setWebSocketError","computed","UserModel","storeOwner","userJsonInfo","areActiveContact","user_image","store","extraMeta","requestAcceptHandlier","requestDenyHandlier","setActiveContact","jsonData","setExtraMeta","SearchUserStore","transporLayer","uiStore","searchedUsers","nextQueryAddress","uiSideBar","loadingUsers","loadUserError","listUser","mappedUsers","userModelInstance","searchUserQuery","setSearchUsers","results","next","userModel","getNextUsersSet","apiSearch","getloadingUserError","UserStore","activeContacts","pendingContacts","isLoadingActiveContactsFlag","isLoadingPendingContactsFlag","loadingActiveError","loadingPendingError","searchStore","asyncLoadData","loadContacts","loadPendingContacts","modelObject","isActive","foundUser","find","element","upDate","setLoadingActive","getContacts","usersContactList","setUser","setLoadingPending","getPendingContacts","usersContactPendingList","idUsername","generateActiveUserList","acceptContactRequest","modifiledPending","replace","setUserModel","denyContactRequest","newUsersActives","unshift","asJson","getLoadingActiveError","getLoadingPendingError","UIUserStore","activeElement","txt","MessagesModel","mssgJson","to_User","arrayMessage","addMessage","userMesages","getMessages","bulkAddMessages","UserMessageStore","userMesagesModels","isLoadingMesagesFlag","loadingMessagesError","contructedMessage","toUser","receiveMessage","to_UserModel","from_UserModel","reaction","setMessageUser","addEventListenerHandlier","setContactUsers","loadMessages","messageJson","constructMessageToSend","sendMessageWebSocket","textMessage","userContact","listContactUser","mssgsJson","activerUser","setContactSingle","getContructedMessage","LogInStore","flag","rootStoreInstance","transportLayer","uiSideBarStore","startAsyncServices","num","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff56bcab.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * \n * @param {*} props - incoming props from managing componet\n */\n//Provides Toggling/Button Abilities\nfunction Toggler(props) {\n    const {onClickHandlier = null} = props;\n    if (onClickHandlier == null){\n      \n    }\n    return (\n      <div className=\"toggler\">\n        <button  onClick ={onClickHandlier}>Close</button>\n      </div>\n    );\n}\n\nexport default Toggler;\n","import React, {Component} from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n//Provides Search Functionality Throught TextInput Send Text Event To Handlier(Parent-)\nclass Search extends Component{\n    constructor(props){\n      super(props);\n\n    }\n    render() {\n      const {value=null, onChange=null, children=null, searchHandlier=null} = this.props;\n      return (\n       \n        <div className=\"search-users\">\n            <form>\n                {children}<input\n                type = \"text\"\n                value = {value}\n                onChange = {onChange}\n                />\n            </form>\n            <div className=\"search-button-container\">\n              <div className=\"searchButton\" onClick={searchHandlier}>\n                <FontAwesomeIcon icon={faSearch} />\n              </div>\n            </div>\n        </div>\n        \n        \n  \n      );\n    }\n    \n  }\n  \n  export default Search;","import React, { Component } from \"react\";\nimport { observer} from \"mobx-react\"\n\n//Active User Componet Keep. UI Componet For User Instance \nclass ActiveUser extends Component {\n    constructor(props) {\n        super(props)\n\n    }\n    //Set the active user by calling internel method belong to the user model\n    setActive = () => {\n        this.props.user.setUserActive();\n    }\n    render() {\n        const {user = null } = this.props;\n\n        return ( \n            <li onClick = { this.setActive } >\n                <a href = \"#\" >\n                    <div className = \"profile-img\">\n                        <img src = \"https://via.placeholder.com/500\" alt = { `user-profile ${user.username}` }/>  \n                    </div > \n                    <div className = \"contact-info\" >\n                        <div> { user.username } </div> \n                    </div >\n                    <div className=\"active-user-status\">\n                        <div className=\"online\">\n                            <button>Online</button>\n                        </div>\n                        <div className=\"offline\">\n                            <button>Offline</button>\n                        </div>\n                    </div>\n                </a> \n            </li >\n        );\n    }\n\n\n}\n\nexport default observer(ActiveUser);","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nconst  SpinnerComponet = (props)=>{\n  \n  return (\n    <div className=\"containerLoading\">\n        <Spinner animation=\"grow\" size=\"lg\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n  </div>\n  );\n}\nexport default SpinnerComponet;","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport ActiveUser from \"./ActiveUser\"\nimport Spinner from 'react-bootstrap/Spinner';\nimport SpinnerComponet from \"../LoadingSpinner/SpinnerComponet\"\n\n//Manages UI Active Users Displayed To The User\nclass ActiveUsers extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const {rootStore,searchText} = this.props;\n    let activeUsers = rootStore.userStore.listActiveContacts;\n    let loading = rootStore.userStore.getIsLoadingActive;\n    if (!loading){\n      //f not active user \n      if (!activeUsers){\n        return (\n          <div className=\"activeUsers\">\n              YOu Have No Contacts..Try Adding Some In The Search User Menu\n          </div>\n         );\n      } \n      return (\n      <div className=\"activeUsers\">\n          \n          <ul className=\"users\">\n              \n              {activeUsers.filter((item=>{\n                return item.username.toLowerCase().includes(searchText.toLowerCase());\n              })).map(user=>{\n                \n                  return (\n                    \n                    // {/* <Spinner animation=\"border\" role=\"status\">\n                    //   <span className=\"sr-only\">Loading...</span>\n                    // </Spinner>\n                    // </> */}\n\n                    <ActiveUser  key={user.uuid} user={user}></ActiveUser>\n                   \n                  );\n              })}\n          </ul>\n      </div>\n      );\n    }\n    else {\n      return (\n        <SpinnerComponet></SpinnerComponet>\n      );\n    }\n  }\n  \n  \n}\n\nexport default inject(\"rootStore\")(observer(ActiveUsers));\n","import React, {Component} from \"react\";\nimport { observer} from \"mobx-react\"\n\n//Provides A List Of Pending Users\nclass PendingUser extends Component{\n  constructor(props){\n    super(props)\n    \n  }   \n  acceptRequest= (user)=>{\n    user.acceptRequest();\n  }\n  denyRequest= (user)=>{\n    user.rejectRequest();\n  }\n  render() {\n    const {user=null} = this.props;\n    \n    return (\n      <li onClick={this.setActive} >\n      <a href=\"#\" >\n        <div className=\"profile-img\">\n          <img src=\"https://via.placeholder.com/500\" alt={`user-profile ${user.username}`} /> \n        </div>\n        <div className=\"contact-info\">\n          <div>{user.username}</div>\n         \n        </div>\n        <div className=\"pending-user-control\">\n          <div className=\"add-contact\">\n            <button onClick= {()=>{\n                this.acceptRequest(user);\n            }}>Add</button>\n          </div>\n          <div className=\"reject-contact\">\n            <button onClick= {()=>{\n                this.denyRequest(user);\n            }}>Reject</button>\n          </div>\n        </div>\n        \n      </a>\n    </li>\n    );\n  }\n  \n  \n}\nexport default observer(PendingUser) ;\n","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport PendingUser from \"./PendingUser\"\nimport SpinnerComponet from \"../LoadingSpinner/SpinnerComponet\";\n//Manages A List Of Pending Users Instances\nclass PendingUsers extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const {/*children,*/ rootStore,searchText} = this.props;\n    let pendingUsers = rootStore.userStore.listPendingContacts;\n    let loading = rootStore.userStore.getIsLoadingPending;\n    if (!loading){\n      if (!pendingUsers){\n          return (\n            <div className=\"pendingUsers\">\n                YOu Have Pending Contact\n            </div>\n           );\n      }\n      return (\n      <div className=\"pendingUsers\">\n          \n          <ul className=\"users\">\n              \n              {pendingUsers.filter((item=>{\n                return item.username.toLowerCase().includes(searchText.toLowerCase());\n              })).map(user=>{\n                \n                  return (\n                      <PendingUser  key={user.uuid} user={user}/>\n                  )\n              })}\n          </ul>\n      </div>\n      );\n    }\n    else {\n      return (\n        <SpinnerComponet></SpinnerComponet>\n      );\n    }\n  }\n  \n  \n}\n\nexport default inject(\"rootStore\")(observer(PendingUsers));\n","import React from \"react\";\n/**\n * \n * @param {*} props - incoming props from managing componet\n */\n//Toggler That Provides User With Ui Option Chnages Such As Active Contact or a list of pending contact\nfunction ActiveUserComponetToggler(props) {\n    const {stateChangeHandler= null, viableStates=null} = props;\n    if (viableStates == null){\n        return (<div>Viable States Werent Given:Error</div>)\n    }\n    return (\n      <div className=\"users-type-toggler\">\n        <ul className=\"users-type-toggler-list\">\n            {viableStates.map(viableState=>{\n                return (\n                <li id={viableState.stateName+\"Id\"} key={viableState.stateName+\"Id\"} \n                        className=\"item-type\">\n                    <button   onClick ={\n                        ()=>stateChangeHandler(viableState.stateName)}>\n                        {viableState.uiName}\n                    </button>\n                </li >)\n            })}\n        </ul>\n      </div>\n    );\n}\n\nexport default ActiveUserComponetToggler;\n","import React, {Component} from \"react\";\nimport { observer } from 'mobx-react';\n//Provides A List Of Pending Users\nclass SearchedUser extends Component{\n  constructor(props){\n    super(props)\n    \n  }   \n  sendContactRequest= (user)=>{\n    if (user !== null){\n      user.sendContactRequest();\n    }\n  }\n  \n  render() {\n    const {user=null} = this.props;\n    const canAddStatus = user.getExtraMeta.canSendRequest;\n    return (\n      <li onClick={this.setActive} >\n      <a href=\"#\" >\n        <div className=\"profile-img\">\n          <img src=\"https://via.placeholder.com/500\" alt={`user-profile ${user.username}`} /> \n        </div>\n        <div className=\"contact-info\">\n          <div>{user.username}</div>\n         \n        </div>\n\n       {canAddStatus && <div className=\"add-user-container\">\n          <div className=\"add-contact\">\n            <button onClick={()=>{\n              this.sendContactRequest(user);\n            }}>Send Request</button>\n          </div>\n        </div>\n       }\n        \n      </a>\n    </li>\n    );\n  }\n  \n  \n}\nexport default observer(SearchedUser) ;\n","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport SpinnerComponet from \"../LoadingSpinner/SpinnerComponet\";\nimport SearchedUser from \"./SearchedUser\";\n//Manages A List Of Pending Users Instances\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown} from '@fortawesome/free-solid-svg-icons'\nclass SearchedUsers extends Component{\n  \n  constructor(props){\n    super(props);\n    this.ulRefSearchedUsers = React.createRef();\n    this.heightList = 0;\n  }\n  //Handles Click Event When User Request For More Users\n  handlierLoadMoreUsers = (event)=>{\n    const {searchUserStore=null} = this.props;\n    if (searchUserStore != null){\n      searchUserStore.getNextDataSet();\n    }\n  }\n  // trackHeightPostion(event){\n  //   // console.log(event);\n  // }\n  // componentDidMount(){\n  //   // this.ulRefSearchedUsers .current.scrollTop =  this.ulRef.current.scrollHeight;\n  //   console.log(this.ulRefSearchedUsers.current);\n  //   if(this.ulRefSearchedUsers.current !== null){\n  //     this.ulRefSearchedUsers.current.addEventListener(\"scroll\", this.trackHeightPostion);\n  //   }\n  // }\n  // componentDidUpdate(){\n  //   console.log(this.ulRefSearchedUsers.current);\n  //   //this.ulRefSearchedUsers.current.addEventListener(\"scroll\", this.trackHeightPostion);\n  // }\n  // componentWillUnmount(){\n  //   this.ulRefSearchedUsers.current.removeEventListener(\"scroll\", this.trackHeightPostion);\n  // }\n  \n  render() {\n    //searchUserStore\n    const {/*children,*/ searchUserStore=null,searchText=null} = this.props;\n    if (searchUserStore == null){\n      return (<div>Seems The RootStore Was Not Provided</div>)\n    }\n    const searchUsers = searchUserStore.getSearchedUsers;\n    const loading = searchUserStore.getloadingUser;\n    const moreUsersLoad= searchUserStore.getNextQueryAddress\n    if (!loading){\n      if (!searchUsers){\n          return (\n            <div className=\"searchUsers\">\n                No Results....Search For Using Above \n            </div>\n           );\n      }\n      return (\n      <div className=\"searchUsers\">\n          \n          <ul ref={this.ulRefSearchedUsers} className=\"users\">\n              \n              {searchUsers.map((user=>{\n                return(\n                        <SearchedUser  key={user.uuid} user={user}/>\n                      )\n              }))}\n             {moreUsersLoad &&\n              <li className=\"loadContact\" onClick={this.handlierLoadMoreUsers}>\n                <div className=\"loading-contacts-container\">\n                  <div className=\"load-more-contacts\" >\n                    <FontAwesomeIcon icon={faChevronDown} />\n                  </div>\n                </div>\n              </li>\n             }\n          </ul>\n      </div>\n      );\n    }\n    else {\n      return (\n        \n        <SpinnerComponet></SpinnerComponet>\n      );\n    }\n  }\n  \n  \n}\n\nexport default inject(\"rootStore\")(observer(SearchedUsers));\n","import React, {Component} from \"react\";\nimport { observer,inject } from \"mobx-react\"\nimport \"../css/SideBar.css\"\nimport Toggler from \"./TogglerComponet/Toggler\"\nimport Search  from \"./Search/Search\"\nimport ActiveUsers from \"./ActiveUsers/ActiveUsers\"\nimport PendingUsers from \"./PendingUsers/PendingUsers\"\nimport ActiveUserComponetToggler from \"./ActiveUserToggler/ActiveUserComponetToggler\"\n//  import css styling \nimport \"../css/ActiveUser.css\"\nimport \"../css/PendingUser.css\"\nimport \"../css/Search.css\"\nimport \"../css/Toggler.css\"\nimport \"../css/LoadingSpinner.css\"\nimport \"../css/SearchedUser.css\"\nimport SearchedUsersComponet from \"./SearchUsers/SearchedUsersComponet\";\n//Manages The Most Top Layer Of The Side Bar U.I\nclass SideBar extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n        searchText: \"\"\n    };\n    \n  }\n  //Toggles The Side Bar \n  toggleActiveSideBar =()=>{\n    this.props.rootStore.uiUserStore.toggleSideBarActive();\n  }\n  //Handles Text Change in child componet Search \n  setSearchText = (event)=>{\n    this.props.rootStore.uiUserStore.setsearchString(event.target.value);\n    \n      \n  }\n  searchForUser=()=>{\n    this.props.rootStore.userStore.getSearchUserStore.searchForUsers();\n  }\n  //Set which Ui Componet Should Be Rendered\n  setUserUiState =(state)=>{\n    this.props.rootStore.uiUserStore.setActiveElement(state);\n    \n      \n    \n  }\n  //Render Componet\n  render() {\n    const {/*children,*/ rootStore} = this.props;\n    const userStateUI = rootStore.uiUserStore.getActiveElement;\n    const viableStates = rootStore.uiUserStore.getViableStates;\n    const searchString = this.props.rootStore.uiUserStore.getSearchString;\n    let toRender = null;\n    if (userStateUI ===  \"ACTIVECONTACTS\" ){\n      toRender = ( <ActiveUsers searchText={searchString }/>);\n    }\n    else if (userStateUI ===  \"PENDINGCONTACTS\"){\n      toRender = ( <PendingUsers searchText={searchString}/>);\n    }\n    else if (userStateUI ===  \"SEARCHPENDING\"){\n      //toRender = ( <PendingUsers searchText={this.state.searchText}/>);\n      toRender = (<SearchedUsersComponet searchUserStore={rootStore.userStore.getSearchUserStore}  \n                  searchText={searchString}/>)\n    }\n    return (\n      <div className={`sidebar ${rootStore.uiUserStore.getIsActive? \"active\" : \"\"}`}>\n        <Toggler onClickHandlier={this.toggleActiveSideBar}/>\n        <ActiveUserComponetToggler viableStates={viableStates} stateChangeHandler={this.setUserUiState}/>\n        <Search searchHandlier={this.searchForUser} value={searchString} onChange={this.setSearchText} children={null}/>\n        {toRender}\n        \n\n\n      </div>\n\n    );\n  }\n  //Viables State Changes \n  viableStates = [\n    \"ACTIVECONTACTS\",\n    \"PENDNGCONTACT\",\n    \"SEARCHUSER\",\n]\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    console.log(error);\n    console.log(errorInfo);\n  }\n  \n}\n\nexport default inject(\"rootStore\")(observer(SideBar));\n","import React, {Component} from \"react\";\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport { observer } from \"mobx-react\";\nclass LoginComponet extends Component{\n    \n    constructor(props){\n      super(props)\n      this.state = \n      {\n          \"show\": false,\n          \"username\": \"\",\n          \"password\": \"\"\n\n      };\n\n    }\n    logInHandlier=()=>{\n        const {logInStore=null} = this.props;\n        logInStore.logInUser(this.state.username, this.state.password);\n        \n    }\n    setShow(bool){\n        this.setState( \n            \n                (previousState)=>{\n                    return {show: bool, password: bool ? previousState.password : \"\"}\n                }\n            \n        );\n    }\n    onChangeEmail = (event)=>{\n        this.setState( \n            {\n                \"username\": event.target.value\n            }\n        );\n    }\n    onChangePassword = (event)=>{\n        this.setState( \n            {\n                \"password\": event.target.value\n            }\n        );\n    }\n    handleClose = () => this.setShow(false);\n    handleShow = () => this.setShow(true);\n    render(){\n        const {logInStore=null} = this.props;\n        return (\n        <>\n            <Button variant=\"primary\" onClick={this.handleShow}>\n                {logInStore.isLoggedIn ? \"LogOut\" : \"LogIn\"}\n            </Button>\n            <Modal className=\"text-center\" show={this.state.show} onHide={this.handleClose} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title className=\"text-center\" >Messenger LogIn</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control value={this.state.username} onChange={this.onChangeEmail}  placeholder=\"Enter email/username\" />\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.Not Even You\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control onChange={this.onChangePassword} value={this.state.password}  type=\"password\" placeholder=\"Password\" />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicChecbox\">\n                    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                </Form.Group>\n                <Button onClick={this.logInHandlier} variant=\"primary\" type=\"submit\">\n                    Login\n                </Button>\n            </Modal.Body>\n            {/* <Modal.Footer>\n            \n            </Modal.Footer> */}\n            </Modal>\n        </>\n        );\n    }\n  }\n  \n  export default observer(LoginComponet);","import React, {Component} from \"react\";\nimport Toggler from \"../TogglerComponet/Toggler\";\nimport { inject} from 'mobx-react';\nimport LoginComponet from \"../Login/LoginComponet\";\n//Proves NavBar Functinality For The User\nclass NavComponet extends Component{\n  constructor(props){\n    super(props)\n   \n  } \n  //Toggles The State Of The NavBar\n  toggleSideBarState= ()=>{\n    this.props.rootStore.uiUserStore.toggleSideBarActive();\n  }\n  render() {\n    const {/*children,*/searchText} = this.props;\n    return (\n      <div className = \"nav-bar-componet\">\n          <Toggler onClickHandlier = {this.toggleSideBarState} ></Toggler>\n          <LoginComponet logInStore ={this.props.rootStore.logInStore }></LoginComponet>\n      </div>)\n  }\n  \n  \n}\nexport default  inject(\"rootStore\")(NavComponet)\n\n","import React, {Component} from \"react\";\nimport { observer } from 'mobx-react';\n\n\n//Handles One UI Message Instance ie. MessageBox \nclass MessageInstanceComponet extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const {message = null, activeUser = null} = this.props;\n    let orientationString = null\n    if (message.from_User === activeUser){\n        orientationString = \"left\";\n    }\n    else {\n        orientationString = \"right\";\n    }\n    let fullClassOrientation = `message ${orientationString}`;\n    return (\n        <li key={message.id} className={fullClassOrientation}>\n            <div className = \"message-box\" >\n                {message.message}\n            </div>\n        </li>\n           \n    )\n  }\n  \n  \n}\n\nexport default  observer(MessageInstanceComponet);\n ","import React, {Component} from \"react\";\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react';\nimport MessageInstanceComponet from \"./MessageInstanceComponet\";\n\n//Handles MessageInstance For Each User-ie Provides A List Of Message Depending On The Active User\nclass MessageListComponet extends Component{\n  constructor(props){\n    super(props)\n    this.ulRef = React.createRef();\n  }   \n  componentDidUpdate(){\n    this.ulRef.current.scrollTop =  this.ulRef.current.scrollHeight;\n    \n    \n  }\n  componentDidMount(){\n    this.ulRef.current.scrollTop =  this.ulRef.current.scrollHeight;\n    console.log( this.ulRef.current.scrollHeight);\n  }\n  render() {\n    const {messages = null, activeUser = null} = this.props;   \n    return (\n        <ul ref={this.ulRef } className=\"message-list-area\">\n             {messages.map(mssg=>{\n                    return (\n                        <MessageInstanceComponet\n                            key = {mssg.id}\n                            message={mssg}\n                            activeUser = {activeUser}\n                        >\n                        </MessageInstanceComponet>\n                        )\n            })}\n        </ul>\n    )\n  }\n  \n  \n}\n\nexport default  inject(\"rootStore\")(observer(MessageListComponet))\n ","import React, {Component} from \"react\";\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react';\nimport MessageListComponet from \"./MessageListComponet\";\n//Manages The Ui Componet \nclass MessageComponet extends Component{\n  constructor(props){\n    super(props)\n  }   \n\n  render() {\n    const { rootStore} = this.props;\n    let activeUser = rootStore.userStore.currentActiveUser;\n    let messages = rootStore.userMessageStore.getMessagesActiveUser\n    let  objectToRender = null;\n    if (activeUser == null ){\n        objectToRender = <div>No Active User Click On One</div>\n    }\n    else {\n        let uuidUser = activeUser.uuid;\n        let userModelMessages = messages;\n        if (userModelMessages === null){\n            objectToRender = <div> Still Loading MEssages </div>\n        }\n        else {\n            objectToRender = <MessageListComponet \n                    messages={userModelMessages.messages}\n                    activeUser = {uuidUser}\n                ></MessageListComponet>\n            }\n        \n\n\n    }\n    \n    return (\n        <div className = \"message-componet\">\n            {objectToRender}\n        </div>\n    )\n  }\n  \n  \n}\n\nexport default  inject(\"rootStore\")(observer(MessageComponet));\n\n ","import React, {Component} from \"react\";\n//TextBox Section This Is Where User Input And Sending Messages Will Be Handle On The Ui/Client Side\nexport default  class MessengerTextArea extends Component{\n  textInputEnter = React.createRef();\n  constructor(props){\n    super(props)\n  }   \n  componentDidUpdate(){\n    let textAreaDOME = this.textInputEnter.current;\n    textAreaDOME.addEventListener(\"keyup\",this.onEnter, false);\n  }\n\n  onEnter= (event)=>{\n    const {sendMessageHandlier=null} = this.props;\n    if (event.code === \"Enter\"){\n      if (sendMessageHandlier != null){\n        sendMessageHandlier();\n      }\n  }\n  }\n  render() {\n    const {text = null , onTextChange= null} = this.props;\n    return (\n     <div className=\"textBox\">\n        <textarea ref={this.textInputEnter} onChange={onTextChange} value= {text}> </textarea>\n      </div>\n    )\n  }\n  \n  \n}\n\n\n","import React, {Component} from \"react\";\nimport MessengerTextArea from \"./MessagingInput/MessengerTextArea\";\nimport { observer } from 'mobx-react';\n//TextBox Section This Is Where User Input And Sending Messages Will Be Handle On The Ui/Client Side\nclass TextBoxMessageComponet extends Component{\n  constructor(props){\n    super(props)\n  }   \n  \n  render() {\n    const {onTextChange=null, messgObject=null, sendMessageHandlier=null} = this.props;\n    const text =  messgObject.contructedMessageInternelMessage;\n\n    return (\n      <div className = \"text-box-message-componet\">\n        <MessengerTextArea \n              sendMessageHandlier= {sendMessageHandlier}\n              text = {text}\n              onTextChange={onTextChange}></MessengerTextArea>\n      </div>\n    )\n  }\n  \n  \n}\n\nexport default observer(TextBoxMessageComponet)\n\n\n\n\n","import React, {Component} from \"react\";\nimport \"../css/Content.css\"\nimport NavComponet from \"./NavComponet/NavComponet\";\nimport MessageComponet from \"./Messages/MessageComponet\";\nimport TextBoxMessageComponet from \"./textBoxMessageComponet\";\nimport { inject, observer } from 'mobx-react';\n\n//Handles The Main Content \nclass MainContent extends Component{\n  constructor(props){\n    //Set internel state for any text chage by the user \n    super(props);\n    this.state = {\n        searchText: \"\"\n    };\n    \n  }\n  //Toggle The SideBar in the store\n  toggleActiveSideBar =()=>{\n    this.props.rootStore.uiUserStore.toggleSideBarActive();\n  }\n  //Handles Text Chnage Events\n  setMessageToSend= (event)=>{\n    \n    let messageText = event.target.value;\n    const {rootStore} = this.props;\n    if (messageText.trim().length > 0 ){\n      rootStore.userMessageStore.setMessageText(messageText);\n    }\n    else {\n      rootStore.userMessageStore.setMessageText(\"\");\n    }\n    \n      \n  }\n  sendMessageHandlier =()=>{\n    const {rootStore} = this.props;\n    const userMessageStore = rootStore.userMessageStore;\n    userMessageStore.sendMessage();\n  }\n  render() {\n    const {rootStore} = this.props;\n    const messgObject = rootStore.userMessageStore;\n    //For Text Input \n    //const messageStore = rootStore.\n    //console.log(rootStore.userStore.activeContacts.length);\n    return (\n        <div className=\"MainContent\"> \n          <NavComponet></NavComponet>\n          <MessageComponet></MessageComponet>\n          <TextBoxMessageComponet\n              messgObject = {messgObject}\n              onTextChange={this.setMessageToSend}\n              sendMessageHandlier = {this.sendMessageHandlier}\n          ></TextBoxMessageComponet>\n        </div>\n\n    );\n  }\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    console.log(error);\n    console.log(errorInfo);\n  }\n  \n}\n\nexport default inject(\"rootStore\")(MainContent);\n","import React from 'react';\nimport './App.css';\nimport SideBar from \"./Messenger/Componets/SideBar\"\nimport MainContent from \"./Messenger/Componets/MainContent\"\nfunction App() {\n  return (\n    <div className=\"container-messenger\">\n      <SideBar/>\n      <MainContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\nimport ReconnectingWebSocket from 'reconnecting-websocket';\n import {observable, action, configure, decorate, reaction, computed, when} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n\nclass MessengerService {\n\n    //LogIn Token Key \n    tokenHeaderReady = null;\n    reconnectingWebSocket = null;\n    //Check if the websocket is connected yet yet?\n    webSocketisConnected = false;\n    webSocketisError = false;\n    isLoggin = false;\n    authToken = null;\n    eventListener = {};\n    base_url = \"\"\n    constructor(){\n        this.headersList = {\n            headers:{\n                \"Content-Type\": 'application/json'\n            },\n        };\n        //check for login changes\n        when (\n            //when we know the user is logged then run the predicate\n            ()=>{\n                return this.isLoggedIn;\n            },\n            ()=>{\n                this.setUpWebSocket();\n            }\n\n        \n        )\n        \n    }\n    /**\n     * Handlier Adding Event For Varius Application Such As Message\n     */\n    addEventListenerHandlier(eventType = null, functionHandlier =null){\n\n        if (eventType === null | functionHandlier === null | !eventType instanceof String){\n        // it's a string){\n            console.log(\"Cannot Add Empty Event Or Handliers or null or not string\");\n        }\n        else {\n            let arrayHandliers = this.eventListener[eventType];\n            if (arrayHandliers !== null & typeof arrayHandliers !== 'undefined' ){\n                //push an an event  to the current event handier queue\n                arrayHandliers.push(functionHandlier);\n            }\n            else {\n                this.eventListener[eventType] = [];\n                this.eventListener[eventType].push(functionHandlier)\n            }\n\n\n        }\n        \n        \n    }\n    //handles events from the web-socket\n    eventReceiverHandlier =(event)=>{\n        let eventJson = JSON.parse(event.data);\n        let eventType = eventJson.type.trim().toLowerCase();\n        if (typeof eventType !== 'undefined' | eventType !== null ){\n            let arrayHandliers= this.eventListener[eventType];\n            if (arrayHandliers !== null | typeof arrayHandliers !== 'undefined' ){\n                arrayHandliers.forEach(handlier=>{\n                    try {\n                        if (handlier.length  < 1){\n                            handlier();\n                        }\n                        else {\n                            handlier(eventJson);\n                        }\n                    }\n                    catch(error){\n                        console.log(error);\n                    }\n                })\n            }\n        }\n    }\n    get isLoggedIn(){\n        return this.isLoggin;\n    }\n    ///send message vio websocket to the host\n    sendMessageWebSocket(message){\n         //add message type \n         return new Promise((resolve,reject)=>{\n             //if we are connected to the server\n            if (this.webSocketisConnected){\n                message['type'] = \"message\"\n                message = JSON.stringify(message)\n                this.reconnectingWebSocket.send(message);\n                resolve(true); //we were able to send the message\n            }\n            else { //we are not connected to the server \n                reject(false);\n            }\n         })\n        \n    }\n\n    setWebSocketError(value){\n        this.webSocketisError = value;\n    }\n    setLoggedIn(value){\n        this.isLoggin = value;\n    }\n    setConnectedWebSocketFlag(value){\n       this.webSocketisConnected = true;\n    }\n  \n    async setUpWebSocket(){\n        \n        let url = `ws://127.0.0.1:8000/ws/messenger/?token=${this.authToken}`;\n        this.reconnectingWebSocket = new ReconnectingWebSocket(url);\n        this.reconnectingWebSocket.addEventListener('open', () => {\n            console.log(\"Connected To WebSocket\");\n            this.setConnectedWebSocketFlag(true);\n            //this.setErrorWebSocketFlag(false);\n        });\n\n        this.reconnectingWebSocket.addEventListener('error', (error) => {\n            console.log(error);\n            this.setConnectedWebSocketFlag(false);\n            //this.setErrorWebSocketFlag(true);\n        });\n\n        this.reconnectingWebSocket.addEventListener('close', (mssg) => {\n            console.log(\"Disconnected To WebSocket\");\n            this.setConnectedWebSocketFlag(false);\n        });\n        this.reconnectingWebSocket.addEventListener('message', this.eventReceiverHandlier )\n            \n          \n        \n    }\n    //\n    static async createWithLoginToken(usernamePassWord=null){\n       \n       let  messageService = new MessengerService();\n       await messageService.getLoginToken(usernamePassWord.username, usernamePassWord.password).then(mssg=>{\n           console.log(\"hbfhjfhjejehjhefvh\");\n       }).catch(error=>{\n           console.log(error);\n       });\n       return messageService;\n    }\n    getContacts(){\n        return axios.get('http://127.0.0.1:8000/user/api/users/active_contacts/',\n        this.headersList\n        ).then((response)=>{\n                return response.data;\n            }\n        )\n      \n    }\n    getPendingContacts(){\n        return axios.get('http://127.0.0.1:8000/user/api/users/pending_contacts/',\n        this.headersList\n        ).then((response)=>{\n            return response.data;\n        }\n        )\n        \n    }\n\n    getMessages(){\n        return axios.get('http://127.0.0.1:8000/api/message/',\n        this.headersList\n        ).then((response)=>{\n            return response.data;\n        }\n        );\n    }\n\n    getLoginToken(username=null, password=null, callBack = null){\n        if (username == null || password == null){\n            return new Promise((resolve, reject)=>{\n                if (this.tokenHeaderReady){\n                    resolve(true);\n                }\n                else {\n                    reject(false);\n                }\n            })\n        }\n        return  axios.post('http://127.0.0.1:8000/user/api/auth/login/',\n        {\"username\":username, \"password\": password},\n        this.headersList\n        ).then((response)=>{\n            let userLoginInfo = response.data;\n            this.headersList.headers[\"Authorization\"] = `Token ${userLoginInfo.token}`;\n            this.tokenHeaderReady = true;\n            this.authToken = userLoginInfo.token;\n            this.setLoggedIn(true)\n            return this.headersList.headers[\"Authorization\"];\n            \n        });\n        \n    }\n\n    acceptContactRequest(user_uuid){\n        let putRequest = `http://127.0.0.1:8000/api/pending-contacts/${user_uuid}/`\n        return axios.put(putRequest,{},this.headersList ).then(response=>{\n            ///if the resource was modified then return the user data\n            if (response.status === 200){\n                return response.data;\n            }\n            //else return a false;\n            else {\n                return false;\n            }\n        });\n    }\n\n    denyContactRequest(user_uuid){\n        console.log(user_uuid);\n        console.log(this.headersList);\n        let putRequest = `http://127.0.0.1:8000/api/pending-contacts/${user_uuid}/`\n        return axios.delete(putRequest,this.headersList ).then(response=>{\n            ///if the resource was modified then return the user data\n            if (response.status === 200){\n                return response.data;\n            }\n            //else return a false;\n            else {\n                return false;\n            }\n        });\n    }\n    searchUsers(querySearch){\n        return axios.get(`http://127.0.0.1:8000/api/users/?search=${querySearch}`, this.headersList).\n            then(response=>{\n                return response.data;\n        })\n    }\n\n    sendContactRequest(userUUID){\n        \n        return  axios.post('http://127.0.0.1:8000/api/pending-contacts/',\n        {\"uuid\":userUUID},\n        this.headersList\n        ).then((response)=>{\n           return response;\n           \n        });\n        \n    }\n    getNextUsersSet(queryString){\n        return axios.get(queryString, this.headersList).\n        then(response=>{\n            return response.data;\n        })\n    }\n\n\n   \n    // initAPI(){\n\n        \n          \n    // }\n    // initWebSocket(){\n        \n    // }\n}\n\n\ndecorate(MessengerService, {\n    isLoggin :observable,\n    webSocketisConnected : observable, \n    setConnectedWebSocketFlag: action,\n    setLoggedIn: action,\n    setWebSocketError: action,\n    isLoggedIn: computed,\n\n})\nexport default MessengerService\n","//IMPORTS\nimport {observable} from \"mobx\"\nimport { decorate } from 'mobx';\nimport { action } from 'mobx';\n//Model The Users Contacts And Potential Contacts\nexport default class UserModel {\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    username = null;\n    //User Information\n    uuid = null\n    user_image=null\n    store = null;\n    areActiveContact=null;\n    extraMeta = {}\n    constructor(storeOwner, userJsonInfo, areActiveContact=null) {\n        this.store = storeOwner;\n        //console.log(storeOwner);\n        this.username = userJsonInfo.username;\n        this.uuid = userJsonInfo.uuid;\n        this.username = this.username;\n        if (areActiveContact){\n            this.areActiveContact =  true;\n        }\n        else {\n            this.areActiveContact =  false;\n        }\n    }\n    /**\n     * \n     * @param {*} data - Json Data To Be Merged With The Current Meta Data\n     */\n    setExtraMeta(data){\n        //merge the two data sources together\n        this.extraMeta = {...this.extraMeta, ...data};\n    }\n    get getExtraMeta(){\n        return this.extraMeta;\n    }\n    acceptRequest(){\n        if (this.areActiveContact === false){\n            this.store.requestAcceptHandlier(this);\n        }\n        else {\n            //more feats maybe error handling\n        }\n    }\n    rejectRequest(){\n        if (this.areActiveContact === false){\n            this.store.requestDenyHandlier(this);\n            \n        }\n        else {\n            //more feats maybe error handling\n        }\n    }\n    sendContactRequest(){\n        //make user request \n        this.store.sendContactRequest(this);\n    }\n    setUserActive() {\n        if (this.store){\n            this.store.setActiveContact(this);\n            //console.log(\"Done Setting User Active\");\n        }\n        else {\n            //console.log(\"No Store Attached To This Model\");\n        }\n    }\n    //Update The Current User Based On Pass Json Object\n    upDate(jsonData){\n        this.username = this.username;\n        this.user_image = this.user_image;\n        this.uuid = this.uuid;\n    }\n    /**\n     * Convert The Internel Data to A Json Object\n     */\n    asJson(){\n        return {\n            uuid: this.uuid,\n            username:this.username,\n            user_image:this.user_image,\n\n        }\n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        return `UUID: ${this.uuid} \n                USERNAME: ${this.username} \n                USER IMAGE:${this.user_image} \n                Active:${this.areActiveContact ? \"Active\" : \"Inactive\"}`\n        \n    }\n}\n\ndecorate(UserModel, {\n    extraMeta : observable,\n    setExtraMeta:action\n})","import UserModel from \"../Models/UserModel\"\nimport { observable, computed, action, decorate, configure} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\nexport default class SearchUserStore{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    searchedUsers = [];\n    nextQueryAddress= null ;\n    uiSideBar= null;\n    transporLayer = null;\n    loadingUsers= false;\n    loadUserError=false;\n    constructor(store=null,transporLayer=null, uiStore= null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.uiStore = uiStore;\n        \n    }\n    get getloadingUser() {\n        return this.loadingUsers;\n    }\n    get getloadingUserError() {\n        return this.loadUserError;\n    }\n    get getNextQueryAddress(){\n        return this.nextQueryAddress;\n    }\n    get getSearchedUsers(){\n        if (this.searchedUsers.length < 1){\n            return false;\n        }\n        else {\n            return this.searchedUsers;\n        }\n    }\n    setSearchUsers(listUser){\n        let mappedUsers = listUser.map(user=>{\n            let userModelInstance = new UserModel(this,user,false);\n            userModelInstance.setExtraMeta(\n                {\"canSendRequest\": true}\n            );\n            return userModelInstance;\n        });\n        this.searchedUsers.push(...mappedUsers);\n    }\n    //makes a request to the server api for list user with matching queries\n    searchForUsers(){\n        let searchUserQuery = this.uiStore.getSearchString;\n        //cannot make empty string queries\n        if (searchUserQuery.trim().length < 1 ){\n            return;\n        }\n        //reset query to empty\n        this.loadingUsers = true;\n        this.searchedUsers = []\n        this.loadUserError = false;\n        this.transporLayer.searchUsers(searchUserQuery).then(action(data=>{\n            this.setSearchUsers(data.results);\n            this.nextQueryAddress = data.next;\n            this.loadUserError = false;\n            this.loadingUsers = false;\n        })).catch(action(error=>{\n            this.loadUserError = true;\n            this.loadingUsers = false;\n        }));\n    }\n    /**\n     * \n     * @param {*} useModel reference to a user model..Processes A Request\n     */\n    sendContactRequest(userModel){\n        this.transporLayer.sendContactRequest(userModel.uuid).then(action(data=>{\n            if(data.status === 201){\n                this.searchedUsers=this.searchedUsers.filter(user=>{\n                    return user.uuid !== userModel.uuid\n                });\n            }\n            else if(data.status!==201 &&  data.status < 300){\n                userModel.setExtraMeta({\"canSendRequest\": false});\n                \n            }\n        }));\n    }\n    getNextDataSet(){\n        this.transporLayer.getNextUsersSet(this.nextQueryAddress)\n        .then(action(data=>{\n            this.setSearchUsers(data.results);\n            this.nextQueryAddress = data.next;\n        })).catch(error=>{\n\n        });\n    }\n\n    //Load contacts active and pending from the server using the transport layer\n   \n}\n\ndecorate(SearchUserStore, {\n     searchedUsers:observable,\n     setSearchUsers: action,\n     getNextDataSet : action,\n     apiSearch : action,\n     getloadingUser: computed,\n     getloadingUserError: computed,\n     getSearchedUsers: computed,\n     searchForUsers: action,\n     loadingUsers : observable,\n    loadUserError:observable,\n\n})","import UserModel from \"../Models/UserModel\"\nimport { observable, computed, action, decorate, configure, when} from \"mobx\";\nimport SearchUserStore from './SearchUserStore';\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\nexport default class UserStore {\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    currentActiveUser=  null;// {usename:null, uuid:null};\n    activeContacts = []\n    pendingContacts = []\n    isLoadingActiveContactsFlag= true//observable.box(true);\n    isLoadingPendingContactsFlag= true //observable.box(true);\n    loadingActiveError= false;\n    loadingPendingError= false;\n    transporLayer = null;\n    searchStore  = null;\n    constructor(store=null,transporLayer=null,uiStore=null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.searchStore = new SearchUserStore(this,this.transporLayer,uiStore);\n        when(\n            ()=>{\n                \n                return this.transporLayer.isLoggedIn;\n                \n            }, \n            ()=>{\n                //if the user is logged in then \n                \n                   \n                    this.asyncLoadData().then(code=>{\n                        console.log(code);\n                    }).catch(error=>{\n                        console.log(error);\n                    })\n               \n            })\n        //this.loadContacts();ls   \n    }\n    //Load contacts active and pending from the server using the transport layer\n    loadData(){\n       \n        this.loadContacts();\n        this.loadPendingContacts();\n    }\n    async asyncLoadData(){\n        try{\n            await this.loadContacts();\n            await this.loadPendingContacts();\n            return true\n        }\n        catch(error){\n            return false;\n        }\n        \n    }\n    get getSearchUserStore(){\n        return this.searchStore;\n    }\n    //set loading flags \n    setLoadingActive(bool){\n        this.isLoadingActiveContactsFlag = bool;\n    }\n    //set loading flags \n    setLoadingPending(bool){\n        this.isLoadingPendingContactsFlag = bool;\n    }\n\n    get getIsLoadingActive(){\n        return this.isLoadingActiveContactsFlag;\n    }\n\n    get getIsLoadingPending(){\n        return this.isLoadingPendingContactsFlag;\n    }\n    //return if there was an error loading  active contacts\n    get getLoadingActiveError(){\n        return this.loadingActiveError;\n    }\n    //return if there was an error loading  active contacts\n    get getLoadingPendingError(){\n        return this.loadingPendingError;\n    }\n    //set user object using model rather than a json object\n    setUserModel(modelObject, isActive=true){\n        if (isActive === true){\n            let foundUser = this.activeContacts.find((element)=>{\n                return element.uuid === modelObject.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(modelObject);\n            }\n            else {\n                this.activeContacts.push(modelObject);\n            }\n            \n        }\n        else {\n            let foundUser = this.pendingContacts.find((element)=>{\n                return element.uuid === modelObject.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(modelObject);\n            }\n            else {\n                this.pendingContacts.push(modelObject);\n            }\n        }\n    }\n    \n    setUser(user, isActive=true){\n        if (isActive === true){\n            let foundUser = this.activeContacts.find((element)=>{\n                return element.uuid === user.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(user);\n            }\n            else {\n                this.activeContacts.push(new UserModel(this,user,true));\n            }\n            \n        }\n        else {\n            let foundUser = this.pendingContacts.find((element)=>{\n                return element.uuid === user.uuid;\n            })\n            if (foundUser != null){\n                foundUser.upDate(user);\n            }\n            else {\n                this.pendingContacts.push(new UserModel(this,user,false));\n            }\n        }\n    }\n\n    loadContacts(){\n        this.setLoadingActive(true);\n        \n        return this.transporLayer.getContacts().then(usersContactList=>{\n                //console.log(usersContactList);\n                if (usersContactList.length === 0){\n                    this.setLoadingActive(false);\n                    return;\n                }\n                usersContactList.forEach(user => {\n                    this.setUser(user,true);\n                });\n                this.setLoadingActive(false);\n                return;\n            }\n        ).catch(error=>{\n            console.log(error);\n            this.loadingActiveError = true;\n        })\n    }\n    loadPendingContacts(){\n        this.setLoadingPending(true);\n        return this.transporLayer.getPendingContacts().then(usersContactPendingList=>{\n                if (usersContactPendingList.length === 0){\n                    this.setLoadingPending(false);\n                    return;\n                }\n                usersContactPendingList.forEach(user => {\n                    this.setUser(user,false);\n                });\n                this.setLoadingPending(false);\n                return;\n            }\n            \n        ).catch(error=>{\n            console.log(error);\n            this.loadingPendingError = true;\n        })\n\n    }\n    setActiveContact(idUsername){\n     \n        if (this.activeContacts.length === 0 || idUsername === null){\n            return false; \n        }\n        else {\n            //console.log(idUsername);\n            let user = this.activeContacts.find((user)=>{\n                return user.uuid === idUsername.uuid || user.username === idUsername.username;\n            });\n            //console.log(\"Found User\" + user);\n            //console.log(user.asJson());\n            if (user === null){\n                return false;\n            }\n            else {\n                //console.log(\"Came here somehow\");\n                this.currentActiveUser = user;\n                this.generateActiveUserList()\n                return true;\n            }\n        }\n    }\n    get listActiveContacts(){\n        if (this.activeContacts.length === 0){\n            return false;\n        }   \n        else{\n            return this.activeContacts;\n            \n            \n        }\n    }\n    get listPendingContacts(){\n        if (this.pendingContacts === null || this.pendingContacts.length === 0){\n            return false;\n        }   \n        else{\n            return this.pendingContacts;\n            \n            \n        }\n    }\n\n    requestAcceptHandlier(userModel){\n        this.transporLayer.acceptContactRequest(userModel.uuid).then(action(response=>{\n            //if the request was accepted Contact made active\n            if (response){\n                //splice  from pending here\n                userModel.areActiveContact=true;\n                let modifiledPending= this.pendingContacts.filter(element=>{\n                    return element.uuid !== userModel.uuid;\n                });\n                this.pendingContacts.replace(modifiledPending);\n                this.setUserModel(userModel, userModel.areActiveContact);\n            }\n            else {\n\n            }\n        })\n        )\n    }\n    //Accept A Model To Accepted Into The Active List Of Contacts\n    //Handles Accepting Of Contact Request\n    requestDenyHandlier(userModel){\n        this.transporLayer.denyContactRequest(userModel.uuid).then(action(response=>{\n            //if the request was accepted Contact made active\n            if (response){\n                //splice  from pending here\n                let modifiledPending= this.pendingContacts.filter(element=>{\n                    return element.uuid !== userModel.uuid;\n                });\n                this.pendingContacts.replace(modifiledPending);\n            }\n            else {\n\n            }\n        })\n        )\n    }\n    \n    generateActiveUserList() {\n       let newUsersActives = this.activeContacts.filter(item=>{\n           return item.uuid !== this.currentActiveUser.uuid;\n       });\n       newUsersActives.unshift(this.currentActiveUser);\n       this.activeContacts = newUsersActives;\n    }\n\n\n    /**\n     * Convert The Internel Data to A Json Object\n     */\n    asJson(){\n      return {\n          \"activeContacts\": this.activeContacts.map((user)=>{\n              return user.asJson();\n          }),\n          \"pendingContacts\": this.pendingContacts.map((user)=>{\n            return user.asJson();\n          }),\n        }\n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        \n    }\n}\n\ndecorate(UserStore , {\n    activeContacts : observable,\n    pendingContacts : observable,\n    isLoadingActiveContactsFlag: observable,\n    isLoadingPendingContactsFlag: observable,\n    setUser: action,\n    loadContacts: action,\n    setLoadingActive : action,\n    setLoadingPending : action,\n    listActiveContacts : computed,\n    setActiveContact : action,\n    loadingActiveError: observable,\n    loadingPendingError: observable,\n    listPendingContacts: computed, \n    currentActiveUser:observable,\n    requestAcceptHandlier : action,\n    requestDenyHandlier: action,\n    getLoadingActiveError : computed,\n    getLoadingPendingError: computed,\n    getIsLoadingPending : computed,\n    getIsLoadingActive: computed\n})","import { observable, computed, action, configure, decorate} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\n\n/**\n * This Class Acts As A Store For SideBar UI state\n */\n\n//UI Store Storeses Various States Of THe UI From Side Bar To Main Content\nclass UIUserStore {\n    viableStates =\n    [\n        {\"ACTIVECONTACTS\": 1 ,\n            \n                \"uiName\":\"Active Contacts\",\"stateName\": \"ACTIVECONTACTS\"\n            \n        },\n        {\"PENDINGCONTACTS\": 2,\n            \n                \"uiName\":\"Pending Contacts\",\"stateName\": \"PENDINGCONTACTS\"\n            \n        },\n        {\"SEARCHPENDING\": 3,\n            \n                \"uiName\":\"Search Contacts\",\"stateName\": \"SEARCHPENDING\"\n            \n        },\n    ]\n    activeElement= \"ACTIVECONTACTS\";\n    isActive = true;\n    store = null\n    /**\n     *\n     * @param {*} store -The Root Store Of The UI-also allow certain depeencies to be injected\n     */\n    searchString = \"\";\n    constructor(store=null){\n        this.store = store;\n    }\n    get getActiveElement(){\n        return this.activeElement;\n    }\n    get getIsActive(){\n        return this.isActive;\n    }\n    get getSearchString(){\n        return this.searchString;\n    }\n    setsearchString(txt){\n        \n        this.searchString = txt;\n    }\n\n    toggleSideBarActive(){\n        this.isActive = !this.isActive;\n    }\n\n    get getViableStates(){\n        return this.viableStates;\n    }\n    setActiveElement(state){\n        if (state != null ){\n            if (state === this.activeElement){\n                this.searchString = \"\";\n            }\n            this.viableStates.forEach(element => {\n                if (state in element){\n                    if (state !== this.activeElement){\n                        this.searchString = \"\";\n                    }\n                    this.activeElement = state;\n                    \n\n                }\n            })\n        }\n        else{\n            console.log(\"Null Given For State: Error\");\n        }\n        \n    }\n\n}\n\ndecorate(UIUserStore,\n    {\n    activeElement: observable,\n    isActive: observable,\n    getActiveElement: computed,\n    getIsActive : computed,\n    toggleSideBarActive: action,\n    setActiveElement: action,\n    searchString: observable,\n    getSearchString : computed,\n    setsearchString : action,\n    }\n)\n\nexport default  UIUserStore;","\nimport { observable, computed, action, decorate, configure} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\n\n\nclass MessagesModel{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    /**\n     * User UUID-C\n     */\n    user = null;\n    messages =  [];// {usename:null, uuid:null};\n    \n    constructor(store=null, user=null){\n        this.store = store;\n        \n        this.user = user\n        // console.log(this.asJson())\n    }\n\n    get getMessages(){\n        return this.userMesages;\n    }\n\n    \n    addMessage(mssgJson){\n       \n       if ((mssgJson.to_User === this.user.uuid || mssgJson.from_User === this.user.uuid) ){\n            this.messages.push(mssgJson)\n        }\n    }\n\n    \n    bulkAddMessages(arrayMessage){\n       \n        arrayMessage.forEach(mssg=>{\n            this.addMessage(mssg);\n        })\n        //console.log(this.messages)\n    }\n    asJson(){\n      return {\n          'user':this.user.uuid, 'messages' : this.messages\n        };\n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        \n    }\n}\n\ndecorate(MessagesModel, {\n    messages: observable,\n    addMessage : action,\n    getMessages: computed, \n    bulkAddMessages: action,\n\n})\n\nexport default MessagesModel;","import MessagesModel from \"../Models/MessagesModel\"\nimport { observable, computed,\n        action, decorate, \n        configure, reaction, when} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\n\n//Manages User Messages Store Data Oritented Container To Manager User Message\nclass UserMessageStore{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    userMesagesModels =  {};// list of users json and there corrsponing messages \n    isLoadingMesagesFlag= true // if loading messages from server and setting up\n    loadingMessagesError= false; // error loading messages\n    transporLayer = null;\n    userStore=null\n    //This is the message with user that will be sent over websocket\n    contructedMessage = {toUser: null , message : \"\"};\n    constructor(store=null,transporLayer=null, userStore=null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.userStore = userStore;\n        if (this.store != null){\n            //react to active user changes \n            //reset message content\n            // reaction to ActiveUSer\n            reaction ( \n                ()=>{\n                    return this.store.userStore.currentActiveUser;\n                }, \n                user=>{\n                    this.setMessageText(\"\");\n                    this.setMessageUser(user);\n                    // console.log(this.contructedMessage)\n                }\n             )\n            if (this.transporLayer!== null){\n                this.transporLayer.addEventListenerHandlier(\n                    \"message\",this.receiveMessage\n                    )\n            }\n        }\n        ///if we got a valid userstore\n        // getLoadingActiveError : computed,\n        if (this.userStore != null ){\n            when(\n                ()=>{\n                    \n                    return !this.userStore.getLoadingActiveError && !this.userStore.getIsLoadingActive;\n                }, \n                ()=>{\n                    this.setContactUsers(this.userStore.listActiveContacts).then(status=>{\n                        if (status === true){\n                            this.loadMessages();\n                        }\n                        else{\n                            return;\n                        }\n                        \n                    }).catch(error=>{\n                        console.log(error)\n                    })\n                }\n            \n            )\n        }\n        \n    }\n    receiveMessage = (event)=>{\n        let to_UserModel = this.userMesagesModels[event.to_User];\n        let from_UserModel = this.userMesagesModels[event.from_User]\n        console.log(this.userMesagesModels);\n        if (to_UserModel !== null & typeof to_UserModel !== \"undefined\"){\n            to_UserModel.addMessage(event);\n        }\n        else if (from_UserModel !== null & typeof from_UserModel !== \"undefined\"){\n            from_UserModel.addMessage(event);\n        }\n        else {\n           \n        }\n    }\n    //sends the current message \n    sendMessage(){\n        //make sure the current active user and the cached message are the same\n        if (this.contructedMessage.toUser === null){\n            return;\n        }\n        if (this.contructedMessage.toUser.uuid === this.store.userStore.currentActiveUser.uuid \n            & this.contructedMessageInternelMessage.trim().length > 0 ){\n            let messageJson = this.constructMessageToSend() \n            console.log(messageJson);\n            this.transporLayer.sendMessageWebSocket(messageJson).then(status=>{\n                this.setMessageText(\"\");\n            }).catch(error=>{\n\n            });\n\n        }\n        //seems they are not in sync time to fix that \n        else{\n            console.log(\"reset\");\n            this.setMessageText(\"\");\n            this.setMessageUser(this.store.userStore.currentActiveUser);\n        }\n    }\n    constructMessageToSend(){\n        let messageAsJson = {\n            toUser: this.contructedMessage.toUser.uuid,\n            message : this.contructedMessage.message.trim()\n        }\n        return messageAsJson;\n    }\n    get contructedMessageInternelMessage(){\n        return this.contructedMessage.message;\n    }\n    ///get the message for the current active user\n    \n    get getMessagesActiveUser(){\n        if (this.contructedMessage.toUser){\n            let activerUser = this.contructedMessage.toUser;\n            if (activerUser.uuid in this.userMesagesModels){\n                return this.userMesagesModels[activerUser.uuid];\n            }\n            else {\n                this.setContactSingle(activerUser)\n                return this.userMesagesModels[activerUser.uuid];\n            }\n        }\n        else {\n            console.log(\"no active User\");\n            return null;\n        }\n    }\n    setMessageText(textMessage){\n        this.contructedMessage.message = textMessage\n    }\n    setMessageUser(currentActiveUser){\n        this.contructedMessage.toUser = currentActiveUser;\n    }\n\n    setContactSingle(userContact){\n        if (!(userContact.uuid in this.userMesagesModels)){\n            let userUUID = userContact.uuid;\n            this.userMesagesModels[userUUID] = new MessagesModel(this,userContact);\n        }\n        //might need to make a query to get your messages \n         \n    }\n    setContactUsers(listContactUser){\n        return new Promise((resolve, reject)=>{\n            this.userMesagesModels = {}\n            if (listContactUser.length > 1){\n                listContactUser.forEach(user=>{\n                    let userUUID = user.uuid;\n                    this.userMesagesModels[userUUID] = new MessagesModel(this,user)\n                })\n                resolve(true);\n            }\n            else {\n                reject(false);\n            }\n        \n            \n        })\n        \n        \n    }\n    //This returns all the message it is up to the client to  sort what group of messages then want\n    get getMessages(){\n        return this.userMesagesModels;\n    }\n    async loadMessages(){\n        if (this.userMesagesModels != null ){\n            \n            return this.transporLayer.getMessages().then(mssgsJson=>{\n                for (let key in this.userMesagesModels){\n                    this.userMesagesModels[key].bulkAddMessages(mssgsJson);\n                }\n               \n            })\n        }\n    }\n    get getContructedMessage(){\n        return this.contructedMessage;\n    }\n    asJson(){\n      return {\n\n          \"MessageModel\" : this.userMesagesModels\n\n          }\n        \n    }\n    /**\n     * Convert Model To String\n     */\n    toString(){\n        \n    }\n}\n\ndecorate(UserMessageStore, {\n    userMesagesModels: observable,\n    isLoadingMesagesFlag:observable, \n    loadingMessagesError:observable,\n    setContactUsers : action,\n    getMessages: computed,\n    contructedMessage : observable,\n    getContructedMessage: computed,\n    setMessageText : action,\n    contructedMessageInternelMessage : computed,\n    setMessageUser: action,\n    sendMessage : action,\n    getMessagesActiveUser: computed,\n    setContactSingle: action\n\n})\n\nexport default UserMessageStore;","import { observable, computed, action, decorate, configure, reaction} from \"mobx\";\n\nconfigure({ enforceActions: 'observed' })\n//IMPORTS\n//Model The Users Contacts And Potential Contacts\nexport default class LogInStore{\n    /**\n     *\n     * @param {*} storeOwner-Store Owner-Owned By This Store Instance\n     */\n    \n    constructor(store=null,transporLayer=null, uiStore= null){\n        this.store = store;\n        this.transporLayer = transporLayer;\n        this.uiStore = uiStore;\n        \n    }\n    //handles loggin in the user from the transport layer side of things \n    logInUser(username=null, password=null){\n        if (username == null || password == null){\n            ///\n        }\n        else {\n            this.transporLayer.getLoginToken(username=username, password=password).then(flag=>{\n                if (flag===true){\n                    console.log(\"we Log in \");\n                }\n                else {\n\n                }\n            })\n        }\n    }\n    get isLoggedIn(){\n        if (this.transporLayer != null){\n            return this.transporLayer.isLoggedIn\n        }\n        else {\n            return false;\n        }\n    }\n\n    //Load contacts active and pending from the server using the transport layer\n   \n}\n\ndecorate(LogInStore, {\n    isLoggedIn: computed,\n    logInUser: action\n})","\nimport {configure} from \"mobx\";\nimport  MessengerService  from \"../Sevices/MessengerService\"\nimport UserStore from \"./UserStore\"\nimport UIUserStore from \"./UIUsersStore\"\nimport UserMessageStore from \"./UserMessagesStore\"\nimport LogInStore from './LoginStore';\nconfigure({ enforceActions: 'observed' })\n/**\n * Root Store \n */\nexport default class RootStore {\n    transportLayer = null;\n    userStore = null;\n    uiSideBarStore = null;\n    constructor(store=null, userNamePassword=null){\n        this.transportLayer = new MessengerService();\n        this.uiUserStore = new UIUserStore(this);\n        this.userStore = new UserStore(this,this.transportLayer, this.uiUserStore );\n        this.userMessageStore = new UserMessageStore(this,this.transportLayer,this.userStore);\n        this.logInStore = new LogInStore(this,this.transportLayer,this.uiSideBarStore);\n        this.startAsyncServices().then((num)=>{\n        }).catch(error=>{\n            console.log(error);\n        })\n    }\n    //Start Async Services That are need as soon a \n    async startAsyncServices(){\n        // await this.transportLayer.getLoginToken(\"Devano\", \"11kingie\");\n        //await this.userStore.asyncLoadData();\n        //await this.userMessageStore.setContactUsers(this.userStore.listActiveContacts)\n        //await this.userMessageStore.loadMessages();\n        return true;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport RootStore from \"./Messenger/Stores/rootStore\"\n\nlet  rootStoreInstance = new RootStore(null,null);\n\nReactDOM.render(\n<Provider rootStore = {rootStoreInstance}>\n<App />\n</Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}